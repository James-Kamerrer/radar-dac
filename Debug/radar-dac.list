
radar-dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004578  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004700  08004700  00005700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048f0  080048f0  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f8  080048f8  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f8  080048f8  000058f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080048fc  080048fc  000058fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004900  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000002b4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c0  200002c0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a614  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cdb  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00012330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b3  00000000  00000000  00012e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d1c  00000000  00000000  00013733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cc0f  00000000  00000000  0003444f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca11d  00000000  00000000  0004105e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010b17b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032fc  00000000  00000000  0010b1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0010e4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046e8 	.word	0x080046e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046e8 	.word	0x080046e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96a 	b.w	8000df0 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	460c      	mov	r4, r1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d14e      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b40:	4694      	mov	ip, r2
 8000b42:	458c      	cmp	ip, r1
 8000b44:	4686      	mov	lr, r0
 8000b46:	fab2 f282 	clz	r2, r2
 8000b4a:	d962      	bls.n	8000c12 <__udivmoddi4+0xde>
 8000b4c:	b14a      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b4e:	f1c2 0320 	rsb	r3, r2, #32
 8000b52:	4091      	lsls	r1, r2
 8000b54:	fa20 f303 	lsr.w	r3, r0, r3
 8000b58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5c:	4319      	orrs	r1, r3
 8000b5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b66:	fa1f f68c 	uxth.w	r6, ip
 8000b6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b72:	fb07 1114 	mls	r1, r7, r4, r1
 8000b76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b7a:	fb04 f106 	mul.w	r1, r4, r6
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b8a:	f080 8112 	bcs.w	8000db2 <__udivmoddi4+0x27e>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 810f 	bls.w	8000db2 <__udivmoddi4+0x27e>
 8000b94:	3c02      	subs	r4, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a59      	subs	r1, r3, r1
 8000b9a:	fa1f f38e 	uxth.w	r3, lr
 8000b9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ba2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000baa:	fb00 f606 	mul.w	r6, r0, r6
 8000bae:	429e      	cmp	r6, r3
 8000bb0:	d90a      	bls.n	8000bc8 <__udivmoddi4+0x94>
 8000bb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bba:	f080 80fc 	bcs.w	8000db6 <__udivmoddi4+0x282>
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	f240 80f9 	bls.w	8000db6 <__udivmoddi4+0x282>
 8000bc4:	4463      	add	r3, ip
 8000bc6:	3802      	subs	r0, #2
 8000bc8:	1b9b      	subs	r3, r3, r6
 8000bca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bce:	2100      	movs	r1, #0
 8000bd0:	b11d      	cbz	r5, 8000bda <__udivmoddi4+0xa6>
 8000bd2:	40d3      	lsrs	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d905      	bls.n	8000bee <__udivmoddi4+0xba>
 8000be2:	b10d      	cbz	r5, 8000be8 <__udivmoddi4+0xb4>
 8000be4:	e9c5 0100 	strd	r0, r1, [r5]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4608      	mov	r0, r1
 8000bec:	e7f5      	b.n	8000bda <__udivmoddi4+0xa6>
 8000bee:	fab3 f183 	clz	r1, r3
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d146      	bne.n	8000c84 <__udivmoddi4+0x150>
 8000bf6:	42a3      	cmp	r3, r4
 8000bf8:	d302      	bcc.n	8000c00 <__udivmoddi4+0xcc>
 8000bfa:	4290      	cmp	r0, r2
 8000bfc:	f0c0 80f0 	bcc.w	8000de0 <__udivmoddi4+0x2ac>
 8000c00:	1a86      	subs	r6, r0, r2
 8000c02:	eb64 0303 	sbc.w	r3, r4, r3
 8000c06:	2001      	movs	r0, #1
 8000c08:	2d00      	cmp	r5, #0
 8000c0a:	d0e6      	beq.n	8000bda <__udivmoddi4+0xa6>
 8000c0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c10:	e7e3      	b.n	8000bda <__udivmoddi4+0xa6>
 8000c12:	2a00      	cmp	r2, #0
 8000c14:	f040 8090 	bne.w	8000d38 <__udivmoddi4+0x204>
 8000c18:	eba1 040c 	sub.w	r4, r1, ip
 8000c1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c20:	fa1f f78c 	uxth.w	r7, ip
 8000c24:	2101      	movs	r1, #1
 8000c26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c36:	fb07 f006 	mul.w	r0, r7, r6
 8000c3a:	4298      	cmp	r0, r3
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x11c>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x11a>
 8000c48:	4298      	cmp	r0, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c4e:	4626      	mov	r6, r4
 8000c50:	1a1c      	subs	r4, r3, r0
 8000c52:	fa1f f38e 	uxth.w	r3, lr
 8000c56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c62:	fb00 f707 	mul.w	r7, r0, r7
 8000c66:	429f      	cmp	r7, r3
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x148>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c72:	d202      	bcs.n	8000c7a <__udivmoddi4+0x146>
 8000c74:	429f      	cmp	r7, r3
 8000c76:	f200 80b0 	bhi.w	8000dda <__udivmoddi4+0x2a6>
 8000c7a:	4620      	mov	r0, r4
 8000c7c:	1bdb      	subs	r3, r3, r7
 8000c7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c82:	e7a5      	b.n	8000bd0 <__udivmoddi4+0x9c>
 8000c84:	f1c1 0620 	rsb	r6, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c94:	fa04 f301 	lsl.w	r3, r4, r1
 8000c98:	ea43 030c 	orr.w	r3, r3, ip
 8000c9c:	40f4      	lsrs	r4, r6
 8000c9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ca2:	0c38      	lsrs	r0, r7, #16
 8000ca4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000cbc:	45a1      	cmp	r9, r4
 8000cbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x1a6>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cca:	f080 8084 	bcs.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cce:	45a1      	cmp	r9, r4
 8000cd0:	f240 8081 	bls.w	8000dd6 <__udivmoddi4+0x2a2>
 8000cd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	eba4 0409 	sub.w	r4, r4, r9
 8000cde:	fa1f f983 	uxth.w	r9, r3
 8000ce2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cf2:	45a4      	cmp	ip, r4
 8000cf4:	d907      	bls.n	8000d06 <__udivmoddi4+0x1d2>
 8000cf6:	193c      	adds	r4, r7, r4
 8000cf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfc:	d267      	bcs.n	8000dce <__udivmoddi4+0x29a>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	d965      	bls.n	8000dce <__udivmoddi4+0x29a>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	443c      	add	r4, r7
 8000d06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0e:	eba4 040c 	sub.w	r4, r4, ip
 8000d12:	429c      	cmp	r4, r3
 8000d14:	46ce      	mov	lr, r9
 8000d16:	469c      	mov	ip, r3
 8000d18:	d351      	bcc.n	8000dbe <__udivmoddi4+0x28a>
 8000d1a:	d04e      	beq.n	8000dba <__udivmoddi4+0x286>
 8000d1c:	b155      	cbz	r5, 8000d34 <__udivmoddi4+0x200>
 8000d1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d22:	eb64 040c 	sbc.w	r4, r4, ip
 8000d26:	fa04 f606 	lsl.w	r6, r4, r6
 8000d2a:	40cb      	lsrs	r3, r1
 8000d2c:	431e      	orrs	r6, r3
 8000d2e:	40cc      	lsrs	r4, r1
 8000d30:	e9c5 6400 	strd	r6, r4, [r5]
 8000d34:	2100      	movs	r1, #0
 8000d36:	e750      	b.n	8000bda <__udivmoddi4+0xa6>
 8000d38:	f1c2 0320 	rsb	r3, r2, #32
 8000d3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d44:	fa24 f303 	lsr.w	r3, r4, r3
 8000d48:	4094      	lsls	r4, r2
 8000d4a:	430c      	orrs	r4, r1
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d54:	fa1f f78c 	uxth.w	r7, ip
 8000d58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d66:	fb00 f107 	mul.w	r1, r0, r7
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x24c>
 8000d6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d76:	d22c      	bcs.n	8000dd2 <__udivmoddi4+0x29e>
 8000d78:	4299      	cmp	r1, r3
 8000d7a:	d92a      	bls.n	8000dd2 <__udivmoddi4+0x29e>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d88:	fb08 3311 	mls	r3, r8, r1, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb01 f307 	mul.w	r3, r1, r7
 8000d94:	42a3      	cmp	r3, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x276>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000da0:	d213      	bcs.n	8000dca <__udivmoddi4+0x296>
 8000da2:	42a3      	cmp	r3, r4
 8000da4:	d911      	bls.n	8000dca <__udivmoddi4+0x296>
 8000da6:	3902      	subs	r1, #2
 8000da8:	4464      	add	r4, ip
 8000daa:	1ae4      	subs	r4, r4, r3
 8000dac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000db0:	e739      	b.n	8000c26 <__udivmoddi4+0xf2>
 8000db2:	4604      	mov	r4, r0
 8000db4:	e6f0      	b.n	8000b98 <__udivmoddi4+0x64>
 8000db6:	4608      	mov	r0, r1
 8000db8:	e706      	b.n	8000bc8 <__udivmoddi4+0x94>
 8000dba:	45c8      	cmp	r8, r9
 8000dbc:	d2ae      	bcs.n	8000d1c <__udivmoddi4+0x1e8>
 8000dbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	e7a8      	b.n	8000d1c <__udivmoddi4+0x1e8>
 8000dca:	4631      	mov	r1, r6
 8000dcc:	e7ed      	b.n	8000daa <__udivmoddi4+0x276>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	e799      	b.n	8000d06 <__udivmoddi4+0x1d2>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e7d4      	b.n	8000d80 <__udivmoddi4+0x24c>
 8000dd6:	46d6      	mov	lr, sl
 8000dd8:	e77f      	b.n	8000cda <__udivmoddi4+0x1a6>
 8000dda:	4463      	add	r3, ip
 8000ddc:	3802      	subs	r0, #2
 8000dde:	e74d      	b.n	8000c7c <__udivmoddi4+0x148>
 8000de0:	4606      	mov	r6, r0
 8000de2:	4623      	mov	r3, r4
 8000de4:	4608      	mov	r0, r1
 8000de6:	e70f      	b.n	8000c08 <__udivmoddi4+0xd4>
 8000de8:	3e02      	subs	r6, #2
 8000dea:	4463      	add	r3, ip
 8000dec:	e730      	b.n	8000c50 <__udivmoddi4+0x11c>
 8000dee:	bf00      	nop

08000df0 <__aeabi_idiv0>:
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	0000      	movs	r0, r0
	...

08000df8 <calcsin>:
uint32_t sine_val[100];

#define PI 3.14159265358979323846

void calcsin ()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	e03a      	b.n	8000e7a <calcsin+0x82>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb2f 	bl	800046c <__aeabi_i2d>
 8000e0e:	a324      	add	r3, pc, #144	@ (adr r3, 8000ea0 <calcsin+0xa8>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fb94 	bl	8000540 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f04f 0200 	mov.w	r2, #0
 8000e24:	4b1a      	ldr	r3, [pc, #104]	@ (8000e90 <calcsin+0x98>)
 8000e26:	f7ff fcb5 	bl	8000794 <__aeabi_ddiv>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	ec43 2b17 	vmov	d7, r2, r3
 8000e32:	eeb0 0a47 	vmov.f32	s0, s14
 8000e36:	eef0 0a67 	vmov.f32	s1, s15
 8000e3a:	f002 fbf9 	bl	8003630 <sin>
 8000e3e:	ec51 0b10 	vmov	r0, r1, d0
 8000e42:	f04f 0200 	mov.w	r2, #0
 8000e46:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <calcsin+0x9c>)
 8000e48:	f7ff f9c4 	bl	80001d4 <__adddf3>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <calcsin+0xa0>)
 8000e5a:	f7ff fb71 	bl	8000540 <__aeabi_dmul>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	460b      	mov	r3, r1
 8000e62:	4610      	mov	r0, r2
 8000e64:	4619      	mov	r1, r3
 8000e66:	f7ff fe2d 	bl	8000ac4 <__aeabi_d2uiz>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	490b      	ldr	r1, [pc, #44]	@ (8000e9c <calcsin+0xa4>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b63      	cmp	r3, #99	@ 0x63
 8000e7e:	ddc1      	ble.n	8000e04 <calcsin+0xc>
	}
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	f3af 8000 	nop.w
 8000e90:	40590000 	.word	0x40590000
 8000e94:	3ff00000 	.word	0x3ff00000
 8000e98:	40a00000 	.word	0x40a00000
 8000e9c:	2000012c 	.word	0x2000012c
 8000ea0:	54442d18 	.word	0x54442d18
 8000ea4:	400921fb 	.word	0x400921fb

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fb11 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f82f 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f993 	bl	80011e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 f971 	bl	80011a0 <MX_DMA_Init>
  MX_DAC_Init();
 8000ebe:	f000 f893 	bl	8000fe8 <MX_DAC_Init>
  MX_TIM2_Init();
 8000ec2:	f000 f8d3 	bl	800106c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000ec6:	f000 f91d 	bl	8001104 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim4);
 8000eca:	480e      	ldr	r0, [pc, #56]	@ (8000f04 <main+0x5c>)
 8000ecc:	f002 f8be 	bl	800304c <HAL_TIM_Base_Start>
  HAL_DACEx_TriangleWaveGenerate(&hdac, DAC1_CHANNEL_2, DAC_TRIANGLEAMPLITUDE_2047);
 8000ed0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <main+0x60>)
 8000ed8:	f000 fe67 	bl	8001baa <HAL_DACEx_TriangleWaveGenerate>
  HAL_DAC_Start(&hdac, DAC1_CHANNEL_2);
 8000edc:	2110      	movs	r1, #16
 8000ede:	480a      	ldr	r0, [pc, #40]	@ (8000f08 <main+0x60>)
 8000ee0:	f000 fc9d 	bl	800181e <HAL_DAC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_TIM_Base_Start(&htim2);
 8000ee4:	4809      	ldr	r0, [pc, #36]	@ (8000f0c <main+0x64>)
 8000ee6:	f002 f8b1 	bl	800304c <HAL_TIM_Base_Start>
	  calcsin();
 8000eea:	f7ff ff85 	bl	8000df8 <calcsin>
	  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2364      	movs	r3, #100	@ 0x64
 8000ef4:	4a06      	ldr	r2, [pc, #24]	@ (8000f10 <main+0x68>)
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <main+0x60>)
 8000efa:	f000 fce7 	bl	80018cc <HAL_DAC_Start_DMA>
	  HAL_TIM_Base_Start(&htim2);
 8000efe:	bf00      	nop
 8000f00:	e7f0      	b.n	8000ee4 <main+0x3c>
 8000f02:	bf00      	nop
 8000f04:	200000e4 	.word	0x200000e4
 8000f08:	20000028 	.word	0x20000028
 8000f0c:	2000009c 	.word	0x2000009c
 8000f10:	2000012c 	.word	0x2000012c

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b094      	sub	sp, #80	@ 0x50
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	2230      	movs	r2, #48	@ 0x30
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f003 fbb4 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	605a      	str	r2, [r3, #4]
 8000f32:	609a      	str	r2, [r3, #8]
 8000f34:	60da      	str	r2, [r3, #12]
 8000f36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <SystemClock_Config+0xcc>)
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	4a27      	ldr	r2, [pc, #156]	@ (8000fe0 <SystemClock_Config+0xcc>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f48:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f54:	2300      	movs	r3, #0
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <SystemClock_Config+0xd0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a21      	ldr	r2, [pc, #132]	@ (8000fe4 <SystemClock_Config+0xd0>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	4b1f      	ldr	r3, [pc, #124]	@ (8000fe4 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f70:	2301      	movs	r3, #1
 8000f72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f84:	2304      	movs	r3, #4
 8000f86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f88:	23a8      	movs	r3, #168	@ 0xa8
 8000f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f90:	2307      	movs	r3, #7
 8000f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fba3 	bl	80026e4 <HAL_RCC_OscConfig>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fa4:	f000 f944 	bl	8001230 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa8:	230f      	movs	r3, #15
 8000faa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fac:	2302      	movs	r3, #2
 8000fae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fb4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fb8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000fba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fbe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2105      	movs	r1, #5
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f001 fe04 	bl	8002bd4 <HAL_RCC_ClockConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fd2:	f000 f92d 	bl	8001230 <Error_Handler>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3750      	adds	r7, #80	@ 0x50
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40007000 	.word	0x40007000

08000fe8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fee:	463b      	mov	r3, r7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_DAC_Init+0x7c>)
 8000ff8:	4a1b      	ldr	r2, [pc, #108]	@ (8001068 <MX_DAC_Init+0x80>)
 8000ffa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ffc:	4819      	ldr	r0, [pc, #100]	@ (8001064 <MX_DAC_Init+0x7c>)
 8000ffe:	f000 fbec 	bl	80017da <HAL_DAC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001008:	f000 f912 	bl	8001230 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800100c:	2324      	movs	r3, #36	@ 0x24
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	2200      	movs	r2, #0
 8001018:	4619      	mov	r1, r3
 800101a:	4812      	ldr	r0, [pc, #72]	@ (8001064 <MX_DAC_Init+0x7c>)
 800101c:	f000 fd36 	bl	8001a8c <HAL_DAC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001026:	f000 f903 	bl	8001230 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800102a:	232c      	movs	r3, #44	@ 0x2c
 800102c:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2210      	movs	r2, #16
 8001032:	4619      	mov	r1, r3
 8001034:	480b      	ldr	r0, [pc, #44]	@ (8001064 <MX_DAC_Init+0x7c>)
 8001036:	f000 fd29 	bl	8001a8c <HAL_DAC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001040:	f000 f8f6 	bl	8001230 <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT2
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_2, DAC_TRIANGLEAMPLITUDE_15) != HAL_OK)
 8001044:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001048:	2110      	movs	r1, #16
 800104a:	4806      	ldr	r0, [pc, #24]	@ (8001064 <MX_DAC_Init+0x7c>)
 800104c:	f000 fdad 	bl	8001baa <HAL_DACEx_TriangleWaveGenerate>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_DAC_Init+0x72>
  {
    Error_Handler();
 8001056:	f000 f8eb 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000028 	.word	0x20000028
 8001068:	40007400 	.word	0x40007400

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	463b      	mov	r3, r7
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_TIM2_Init+0x94>)
 800108a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800108e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_TIM2_Init+0x94>)
 8001092:	2253      	movs	r2, #83	@ 0x53
 8001094:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_TIM2_Init+0x94>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_TIM2_Init+0x94>)
 800109e:	2263      	movs	r2, #99	@ 0x63
 80010a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010ae:	4814      	ldr	r0, [pc, #80]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010b0:	f001 ff7c 	bl	8002fac <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80010ba:	f000 f8b9 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	4619      	mov	r1, r3
 80010ca:	480d      	ldr	r0, [pc, #52]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010cc:	f002 f826 	bl	800311c <HAL_TIM_ConfigClockSource>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80010d6:	f000 f8ab 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010da:	2320      	movs	r3, #32
 80010dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	4619      	mov	r1, r3
 80010e6:	4806      	ldr	r0, [pc, #24]	@ (8001100 <MX_TIM2_Init+0x94>)
 80010e8:	f002 fa26 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80010f2:	f000 f89d 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	3718      	adds	r7, #24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2000009c 	.word	0x2000009c

08001104 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0308 	add.w	r3, r7, #8
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	463b      	mov	r3, r7
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <MX_TIM4_Init+0x98>)
 8001124:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001128:	2253      	movs	r2, #83	@ 0x53
 800112a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <MX_TIM4_Init+0x94>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001134:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001138:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <MX_TIM4_Init+0x94>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001142:	2200      	movs	r2, #0
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001146:	4814      	ldr	r0, [pc, #80]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001148:	f001 ff30 	bl	8002fac <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 f86d 	bl	8001230 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001156:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	4619      	mov	r1, r3
 8001162:	480d      	ldr	r0, [pc, #52]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001164:	f001 ffda 	bl	800311c <HAL_TIM_ConfigClockSource>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800116e:	f000 f85f 	bl	8001230 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	4619      	mov	r1, r3
 800117e:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_TIM4_Init+0x94>)
 8001180:	f002 f9da 	bl	8003538 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800118a:	f000 f851 	bl	8001230 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200000e4 	.word	0x200000e4
 800119c:	40000800 	.word	0x40000800

080011a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_DMA_Init+0x3c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a0b      	ldr	r2, [pc, #44]	@ (80011dc <MX_DMA_Init+0x3c>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2010      	movs	r0, #16
 80011c8:	f000 fad1 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011cc:	2010      	movs	r0, #16
 80011ce:	f000 faea 	bl	80017a6 <HAL_NVIC_EnableIRQ>

}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MX_GPIO_Init+0x4c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a0f      	ldr	r2, [pc, #60]	@ (800122c <MX_GPIO_Init+0x4c>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <MX_GPIO_Init+0x4c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <MX_GPIO_Init+0x4c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a08      	ldr	r2, [pc, #32]	@ (800122c <MX_GPIO_Init+0x4c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b06      	ldr	r3, [pc, #24]	@ (800122c <MX_GPIO_Init+0x4c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <Error_Handler+0x8>

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_MspInit+0x4c>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124a:	4a0f      	ldr	r2, [pc, #60]	@ (8001288 <HAL_MspInit+0x4c>)
 800124c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001250:	6453      	str	r3, [r2, #68]	@ 0x44
 8001252:	4b0d      	ldr	r3, [pc, #52]	@ (8001288 <HAL_MspInit+0x4c>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001256:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_MspInit+0x4c>)
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <HAL_MspInit+0x4c>)
 8001268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126c:	6413      	str	r3, [r2, #64]	@ 0x40
 800126e:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <HAL_MspInit+0x4c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800127a:	2007      	movs	r0, #7
 800127c:	f000 fa6c 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40023800 	.word	0x40023800

0800128c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001368 <HAL_DAC_MspInit+0xdc>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d158      	bne.n	8001360 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <HAL_DAC_MspInit+0xe0>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b6:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <HAL_DAC_MspInit+0xe0>)
 80012b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80012bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <HAL_DAC_MspInit+0xe0>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b27      	ldr	r3, [pc, #156]	@ (800136c <HAL_DAC_MspInit+0xe0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a26      	ldr	r2, [pc, #152]	@ (800136c <HAL_DAC_MspInit+0xe0>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <HAL_DAC_MspInit+0xe0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012e6:	2330      	movs	r3, #48	@ 0x30
 80012e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 0314 	add.w	r3, r7, #20
 80012f6:	4619      	mov	r1, r3
 80012f8:	481d      	ldr	r0, [pc, #116]	@ (8001370 <HAL_DAC_MspInit+0xe4>)
 80012fa:	f001 f857 	bl	80023ac <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001300:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_DAC_MspInit+0xec>)
 8001302:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001304:	4b1b      	ldr	r3, [pc, #108]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001306:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800130a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 800130e:	2240      	movs	r2, #64	@ 0x40
 8001310:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001312:	4b18      	ldr	r3, [pc, #96]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001318:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 800131a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001322:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001326:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 800132a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800132e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001330:	4b10      	ldr	r3, [pc, #64]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001332:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001336:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800133e:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001340:	2200      	movs	r2, #0
 8001342:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001344:	480b      	ldr	r0, [pc, #44]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001346:	f000 fcc1 	bl	8001ccc <HAL_DMA_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8001350:	f7ff ff6e 	bl	8001230 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	4a06      	ldr	r2, [pc, #24]	@ (8001374 <HAL_DAC_MspInit+0xe8>)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	@ 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40007400 	.word	0x40007400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000
 8001374:	2000003c 	.word	0x2000003c
 8001378:	40026088 	.word	0x40026088

0800137c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800138c:	d10e      	bne.n	80013ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_TIM_Base_MspInit+0x64>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a12      	ldr	r2, [pc, #72]	@ (80013e0 <HAL_TIM_Base_MspInit+0x64>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <HAL_TIM_Base_MspInit+0x64>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013aa:	e012      	b.n	80013d2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0c      	ldr	r2, [pc, #48]	@ (80013e4 <HAL_TIM_Base_MspInit+0x68>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d10d      	bne.n	80013d2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	4b09      	ldr	r3, [pc, #36]	@ (80013e0 <HAL_TIM_Base_MspInit+0x64>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a08      	ldr	r2, [pc, #32]	@ (80013e0 <HAL_TIM_Base_MspInit+0x64>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b06      	ldr	r3, [pc, #24]	@ (80013e0 <HAL_TIM_Base_MspInit+0x64>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40000800 	.word	0x40000800

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <NMI_Handler+0x4>

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <MemManage_Handler+0x4>

08001400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <UsageFault_Handler+0x4>

08001410 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143e:	f000 f89b 	bl	8001578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800144c:	4802      	ldr	r0, [pc, #8]	@ (8001458 <DMA1_Stream5_IRQHandler+0x10>)
 800144e:	f000 fd43 	bl	8001ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2000003c 	.word	0x2000003c

0800145c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <SystemInit+0x20>)
 8001462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001466:	4a05      	ldr	r2, [pc, #20]	@ (800147c <SystemInit+0x20>)
 8001468:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800146c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001484:	f7ff ffea 	bl	800145c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800148a:	490d      	ldr	r1, [pc, #52]	@ (80014c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800148c:	4a0d      	ldr	r2, [pc, #52]	@ (80014c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800148e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001490:	e002      	b.n	8001498 <LoopCopyDataInit>

08001492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001496:	3304      	adds	r3, #4

08001498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800149c:	d3f9      	bcc.n	8001492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a0:	4c0a      	ldr	r4, [pc, #40]	@ (80014cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a4:	e001      	b.n	80014aa <LoopFillZerobss>

080014a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a8:	3204      	adds	r2, #4

080014aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ac:	d3fb      	bcc.n	80014a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ae:	f003 f8f7 	bl	80046a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b2:	f7ff fcf9 	bl	8000ea8 <main>
  bx  lr    
 80014b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014c4:	08004900 	.word	0x08004900
  ldr r2, =_sbss
 80014c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014cc:	200002c0 	.word	0x200002c0

080014d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d0:	e7fe      	b.n	80014d0 <ADC_IRQHandler>
	...

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_Init+0x40>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <HAL_Init+0x40>)
 80014de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <HAL_Init+0x40>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001514 <HAL_Init+0x40>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <HAL_Init+0x40>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <HAL_Init+0x40>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fc:	2003      	movs	r0, #3
 80014fe:	f000 f92b 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f808 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001508:	f7ff fe98 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40023c00 	.word	0x40023c00

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <HAL_InitTick+0x54>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	4b12      	ldr	r3, [pc, #72]	@ (8001570 <HAL_InitTick+0x58>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f943 	bl	80017c2 <HAL_SYSTICK_Config>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e00e      	b.n	8001564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b0f      	cmp	r3, #15
 800154a:	d80a      	bhi.n	8001562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154c:	2200      	movs	r2, #0
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	f000 f90b 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001558:	4a06      	ldr	r2, [pc, #24]	@ (8001574 <HAL_InitTick+0x5c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	e000      	b.n	8001564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000000 	.word	0x20000000
 8001570:	20000008 	.word	0x20000008
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x20>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	4b06      	ldr	r3, [pc, #24]	@ (800159c <HAL_IncTick+0x24>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4413      	add	r3, r2
 8001588:	4a04      	ldr	r2, [pc, #16]	@ (800159c <HAL_IncTick+0x24>)
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008
 800159c:	200002bc 	.word	0x200002bc

080015a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  return uwTick;
 80015a4:	4b03      	ldr	r3, [pc, #12]	@ (80015b4 <HAL_GetTick+0x14>)
 80015a6:	681b      	ldr	r3, [r3, #0]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	200002bc 	.word	0x200002bc

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ea:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	60d3      	str	r3, [r2, #12]
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	@ (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff3e 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff31 	bl	800161c <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa2 	bl	8001714 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e014      	b.n	8001816 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	791b      	ldrb	r3, [r3, #4]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d105      	bne.n	8001802 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff fd45 	bl	800128c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2202      	movs	r2, #2
 8001806:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2201      	movs	r2, #1
 8001812:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e046      	b.n	80018c0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	795b      	ldrb	r3, [r3, #5]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_DAC_Start+0x20>
 800183a:	2302      	movs	r3, #2
 800183c:	e040      	b.n	80018c0 <HAL_DAC_Start+0xa2>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2202      	movs	r2, #2
 8001848:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6819      	ldr	r1, [r3, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2201      	movs	r2, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10f      	bne.n	8001888 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001872:	2b3c      	cmp	r3, #60	@ 0x3c
 8001874:	d11d      	bne.n	80018b2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f042 0201 	orr.w	r2, r2, #1
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e014      	b.n	80018b2 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	213c      	movs	r1, #60	@ 0x3c
 800189a:	fa01 f303 	lsl.w	r3, r1, r3
 800189e:	429a      	cmp	r2, r3
 80018a0:	d107      	bne.n	80018b2 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f042 0202 	orr.w	r2, r2, #2
 80018b0:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0a2      	b.n	8001a2e <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	795b      	ldrb	r3, [r3, #5]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_DAC_Start_DMA+0x28>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e09c      	b.n	8001a2e <HAL_DAC_Start_DMA+0x162>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2202      	movs	r2, #2
 80018fe:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d129      	bne.n	800195a <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a4b      	ldr	r2, [pc, #300]	@ (8001a38 <HAL_DAC_Start_DMA+0x16c>)
 800190c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4a4a      	ldr	r2, [pc, #296]	@ (8001a3c <HAL_DAC_Start_DMA+0x170>)
 8001914:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	4a49      	ldr	r2, [pc, #292]	@ (8001a40 <HAL_DAC_Start_DMA+0x174>)
 800191c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800192c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_DAC_Start_DMA+0x70>
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	2b04      	cmp	r3, #4
 8001938:	d005      	beq.n	8001946 <HAL_DAC_Start_DMA+0x7a>
 800193a:	e009      	b.n	8001950 <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3308      	adds	r3, #8
 8001942:	613b      	str	r3, [r7, #16]
        break;
 8001944:	e033      	b.n	80019ae <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	330c      	adds	r3, #12
 800194c:	613b      	str	r3, [r7, #16]
        break;
 800194e:	e02e      	b.n	80019ae <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3310      	adds	r3, #16
 8001956:	613b      	str	r3, [r7, #16]
        break;
 8001958:	e029      	b.n	80019ae <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	4a39      	ldr	r2, [pc, #228]	@ (8001a44 <HAL_DAC_Start_DMA+0x178>)
 8001960:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	4a38      	ldr	r2, [pc, #224]	@ (8001a48 <HAL_DAC_Start_DMA+0x17c>)
 8001968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	4a37      	ldr	r2, [pc, #220]	@ (8001a4c <HAL_DAC_Start_DMA+0x180>)
 8001970:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001980:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d003      	beq.n	8001990 <HAL_DAC_Start_DMA+0xc4>
 8001988:	6a3b      	ldr	r3, [r7, #32]
 800198a:	2b04      	cmp	r3, #4
 800198c:	d005      	beq.n	800199a <HAL_DAC_Start_DMA+0xce>
 800198e:	e009      	b.n	80019a4 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3314      	adds	r3, #20
 8001996:	613b      	str	r3, [r7, #16]
        break;
 8001998:	e009      	b.n	80019ae <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3318      	adds	r3, #24
 80019a0:	613b      	str	r3, [r7, #16]
        break;
 80019a2:	e004      	b.n	80019ae <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	331c      	adds	r3, #28
 80019aa:	613b      	str	r3, [r7, #16]
        break;
 80019ac:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d111      	bne.n	80019d8 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6898      	ldr	r0, [r3, #8]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	f000 fa2b 	bl	8001e28 <HAL_DMA_Start_IT>
 80019d2:	4603      	mov	r3, r0
 80019d4:	75fb      	strb	r3, [r7, #23]
 80019d6:	e010      	b.n	80019fa <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 80019e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	68d8      	ldr	r0, [r3, #12]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	f000 fa19 	bl	8001e28 <HAL_DMA_Start_IT>
 80019f6:	4603      	mov	r3, r0
 80019f8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2200      	movs	r2, #0
 80019fe:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001a00:	7dfb      	ldrb	r3, [r7, #23]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10c      	bne.n	8001a20 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6819      	ldr	r1, [r3, #0]
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2201      	movs	r2, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e005      	b.n	8001a2c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	f043 0204 	orr.w	r2, r3, #4
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	08001b3f 	.word	0x08001b3f
 8001a3c:	08001b61 	.word	0x08001b61
 8001a40:	08001b7d 	.word	0x08001b7d
 8001a44:	08001c5f 	.word	0x08001c5f
 8001a48:	08001c81 	.word	0x08001c81
 8001a4c:	08001c9d 	.word	0x08001c9d

08001a50 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_DAC_ConfigChannel+0x1c>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e042      	b.n	8001b32 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	795b      	ldrb	r3, [r3, #5]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_DAC_ConfigChannel+0x2c>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e03c      	b.n	8001b32 <HAL_DAC_ConfigChannel+0xa6>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2201      	movs	r2, #1
 8001abc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6819      	ldr	r1, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f003 0310 	and.w	r3, r3, #16
 8001b14:	22c0      	movs	r2, #192	@ 0xc0
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	400a      	ands	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2201      	movs	r2, #1
 8001b28:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001b30:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	@ 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b084      	sub	sp, #16
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f7ff ff7f 	bl	8001a50 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	711a      	strb	r2, [r3, #4]
}
 8001b58:	bf00      	nop
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b6c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff ff78 	bl	8001a64 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001b74:	bf00      	nop
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	f043 0204 	orr.w	r2, r3, #4
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff ff6e 	bl	8001a78 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	711a      	strb	r2, [r3, #4]
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_DACEx_TriangleWaveGenerate+0x16>
  {
    return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e02a      	b.n	8001c16 <HAL_DACEx_TriangleWaveGenerate+0x6c>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	795b      	ldrb	r3, [r3, #5]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <HAL_DACEx_TriangleWaveGenerate+0x22>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	e024      	b.n	8001c16 <HAL_DACEx_TriangleWaveGenerate+0x6c>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	ea02 0103 	and.w	r1, r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2200      	movs	r2, #0
 8001c12:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr

08001c5e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ffd8 	bl	8001c22 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	711a      	strb	r2, [r3, #4]
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f7ff ffd1 	bl	8001c36 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca8:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	f043 0204 	orr.w	r2, r3, #4
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f7ff ffc7 	bl	8001c4a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	711a      	strb	r2, [r3, #4]
}
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001cd8:	f7ff fc62 	bl	80015a0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e099      	b.n	8001e1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f022 0201 	bic.w	r2, r2, #1
 8001d06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d08:	e00f      	b.n	8001d2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d0a:	f7ff fc49 	bl	80015a0 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d908      	bls.n	8001d2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2203      	movs	r2, #3
 8001d22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e078      	b.n	8001e1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e8      	bne.n	8001d0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <HAL_DMA_Init+0x158>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d107      	bne.n	8001d94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f023 0307 	bic.w	r3, r3, #7
 8001daa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d117      	bne.n	8001dee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d00e      	beq.n	8001dee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 fa6f 	bl	80022b4 <DMA_CheckFifoParam>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d008      	beq.n	8001dee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2240      	movs	r2, #64	@ 0x40
 8001de0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001dea:	2301      	movs	r3, #1
 8001dec:	e016      	b.n	8001e1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa26 	bl	8002248 <DMA_CalcBaseAndBitshift>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e04:	223f      	movs	r2, #63	@ 0x3f
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	f010803f 	.word	0xf010803f

08001e28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_DMA_Start_IT+0x26>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e040      	b.n	8001ed0 <HAL_DMA_Start_IT+0xa8>
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d12f      	bne.n	8001ec2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	68f8      	ldr	r0, [r7, #12]
 8001e78:	f000 f9b8 	bl	80021ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e80:	223f      	movs	r2, #63	@ 0x3f
 8001e82:	409a      	lsls	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 0216 	orr.w	r2, r2, #22
 8001e96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0208 	orr.w	r2, r2, #8
 8001eae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	e005      	b.n	8001ece <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee4:	4b8e      	ldr	r3, [pc, #568]	@ (8002120 <HAL_DMA_IRQHandler+0x248>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8e      	ldr	r2, [pc, #568]	@ (8002124 <HAL_DMA_IRQHandler+0x24c>)
 8001eea:	fba2 2303 	umull	r2, r3, r2, r3
 8001eee:	0a9b      	lsrs	r3, r3, #10
 8001ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f02:	2208      	movs	r2, #8
 8001f04:	409a      	lsls	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01a      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f30:	2208      	movs	r2, #8
 8001f32:	409a      	lsls	r2, r3
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f3c:	f043 0201 	orr.w	r2, r3, #1
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f48:	2201      	movs	r2, #1
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d012      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f66:	2201      	movs	r2, #1
 8001f68:	409a      	lsls	r2, r3
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f72:	f043 0202 	orr.w	r2, r3, #2
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0302 	and.w	r3, r3, #2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00b      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	409a      	lsls	r2, r3
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fa8:	f043 0204 	orr.w	r2, r3, #4
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb4:	2210      	movs	r2, #16
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d043      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d03c      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd2:	2210      	movs	r2, #16
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d018      	beq.n	800201a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d108      	bne.n	8002008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d024      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e01f      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	4798      	blx	r3
 8002018:	e016      	b.n	8002048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d107      	bne.n	8002038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0208 	bic.w	r2, r2, #8
 8002036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800204c:	2220      	movs	r2, #32
 800204e:	409a      	lsls	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4013      	ands	r3, r2
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808f 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0310 	and.w	r3, r3, #16
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8087 	beq.w	8002178 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206e:	2220      	movs	r2, #32
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b05      	cmp	r3, #5
 8002080:	d136      	bne.n	80020f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0216 	bic.w	r2, r2, #22
 8002090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d103      	bne.n	80020b2 <HAL_DMA_IRQHandler+0x1da>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d007      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0208 	bic.w	r2, r2, #8
 80020c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	223f      	movs	r2, #63	@ 0x3f
 80020c8:	409a      	lsls	r2, r3
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d07e      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	4798      	blx	r3
        }
        return;
 80020ee:	e079      	b.n	80021e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d01d      	beq.n	800213a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10d      	bne.n	8002128 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002110:	2b00      	cmp	r3, #0
 8002112:	d031      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	4798      	blx	r3
 800211c:	e02c      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
 800211e:	bf00      	nop
 8002120:	20000000 	.word	0x20000000
 8002124:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212c:	2b00      	cmp	r3, #0
 800212e:	d023      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	4798      	blx	r3
 8002138:	e01e      	b.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0210 	bic.w	r2, r2, #16
 8002156:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2200      	movs	r2, #0
 8002164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d032      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d022      	beq.n	80021d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2205      	movs	r2, #5
 8002190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3301      	adds	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d307      	bcc.n	80021c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f2      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x2cc>
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d005      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
 80021e2:	e000      	b.n	80021e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021e4:	bf00      	nop
    }
  }
}
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2b40      	cmp	r3, #64	@ 0x40
 8002218:	d108      	bne.n	800222c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222a:	e007      	b.n	800223c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	60da      	str	r2, [r3, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	3b10      	subs	r3, #16
 8002258:	4a14      	ldr	r2, [pc, #80]	@ (80022ac <DMA_CalcBaseAndBitshift+0x64>)
 800225a:	fba2 2303 	umull	r2, r3, r2, r3
 800225e:	091b      	lsrs	r3, r3, #4
 8002260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002262:	4a13      	ldr	r2, [pc, #76]	@ (80022b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4413      	add	r3, r2
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2b03      	cmp	r3, #3
 8002274:	d909      	bls.n	800228a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800227e:	f023 0303 	bic.w	r3, r3, #3
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58
 8002288:	e007      	b.n	800229a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002292:	f023 0303 	bic.w	r3, r3, #3
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	aaaaaaab 	.word	0xaaaaaaab
 80022b0:	08004710 	.word	0x08004710

080022b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d11f      	bne.n	800230e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d856      	bhi.n	8002382 <DMA_CheckFifoParam+0xce>
 80022d4:	a201      	add	r2, pc, #4	@ (adr r2, 80022dc <DMA_CheckFifoParam+0x28>)
 80022d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022da:	bf00      	nop
 80022dc:	080022ed 	.word	0x080022ed
 80022e0:	080022ff 	.word	0x080022ff
 80022e4:	080022ed 	.word	0x080022ed
 80022e8:	08002383 	.word	0x08002383
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d046      	beq.n	8002386 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e043      	b.n	8002386 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002302:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002306:	d140      	bne.n	800238a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800230c:	e03d      	b.n	800238a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002316:	d121      	bne.n	800235c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d837      	bhi.n	800238e <DMA_CheckFifoParam+0xda>
 800231e:	a201      	add	r2, pc, #4	@ (adr r2, 8002324 <DMA_CheckFifoParam+0x70>)
 8002320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002324:	08002335 	.word	0x08002335
 8002328:	0800233b 	.word	0x0800233b
 800232c:	08002335 	.word	0x08002335
 8002330:	0800234d 	.word	0x0800234d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
      break;
 8002338:	e030      	b.n	800239c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d025      	beq.n	8002392 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234a:	e022      	b.n	8002392 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002354:	d11f      	bne.n	8002396 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235a:	e01c      	b.n	8002396 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d903      	bls.n	800236a <DMA_CheckFifoParam+0xb6>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d003      	beq.n	8002370 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002368:	e018      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
      break;
 800236e:	e015      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00e      	beq.n	800239a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	73fb      	strb	r3, [r7, #15]
      break;
 8002380:	e00b      	b.n	800239a <DMA_CheckFifoParam+0xe6>
      break;
 8002382:	bf00      	nop
 8002384:	e00a      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002386:	bf00      	nop
 8002388:	e008      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e006      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e004      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e002      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;   
 8002396:	bf00      	nop
 8002398:	e000      	b.n	800239c <DMA_CheckFifoParam+0xe8>
      break;
 800239a:	bf00      	nop
    }
  } 
  
  return status; 
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	2300      	movs	r3, #0
 80023c4:	61fb      	str	r3, [r7, #28]
 80023c6:	e16b      	b.n	80026a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023c8:	2201      	movs	r2, #1
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	f040 815a 	bne.w	800269a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f003 0303 	and.w	r3, r3, #3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d005      	beq.n	80023fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d130      	bne.n	8002460 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	68da      	ldr	r2, [r3, #12]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 0201 	and.w	r2, r3, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	2b03      	cmp	r3, #3
 800246a:	d017      	beq.n	800249c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	005b      	lsls	r3, r3, #1
 8002476:	2203      	movs	r2, #3
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d123      	bne.n	80024f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	08da      	lsrs	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3208      	adds	r2, #8
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	f003 0307 	and.w	r3, r3, #7
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	08da      	lsrs	r2, r3, #3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3208      	adds	r2, #8
 80024ea:	69b9      	ldr	r1, [r7, #24]
 80024ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	2203      	movs	r2, #3
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 80b4 	beq.w	800269a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	4b60      	ldr	r3, [pc, #384]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a5f      	ldr	r2, [pc, #380]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 800253c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b5d      	ldr	r3, [pc, #372]	@ (80026b8 <HAL_GPIO_Init+0x30c>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800254e:	4a5b      	ldr	r2, [pc, #364]	@ (80026bc <HAL_GPIO_Init+0x310>)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	089b      	lsrs	r3, r3, #2
 8002554:	3302      	adds	r3, #2
 8002556:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	220f      	movs	r2, #15
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a52      	ldr	r2, [pc, #328]	@ (80026c0 <HAL_GPIO_Init+0x314>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d02b      	beq.n	80025d2 <HAL_GPIO_Init+0x226>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a51      	ldr	r2, [pc, #324]	@ (80026c4 <HAL_GPIO_Init+0x318>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x222>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a50      	ldr	r2, [pc, #320]	@ (80026c8 <HAL_GPIO_Init+0x31c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x21e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	@ (80026cc <HAL_GPIO_Init+0x320>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	@ (80026d0 <HAL_GPIO_Init+0x324>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	@ (80026d4 <HAL_GPIO_Init+0x328>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	@ (80026d8 <HAL_GPIO_Init+0x32c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	@ (80026dc <HAL_GPIO_Init+0x330>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x20a>
 80025b2:	2307      	movs	r3, #7
 80025b4:	e00e      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025b6:	2308      	movs	r3, #8
 80025b8:	e00c      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ba:	2306      	movs	r3, #6
 80025bc:	e00a      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025be:	2305      	movs	r3, #5
 80025c0:	e008      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c2:	2304      	movs	r3, #4
 80025c4:	e006      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025c6:	2303      	movs	r3, #3
 80025c8:	e004      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e002      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <HAL_GPIO_Init+0x228>
 80025d2:	2300      	movs	r3, #0
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f002 0203 	and.w	r2, r2, #3
 80025da:	0092      	lsls	r2, r2, #2
 80025dc:	4093      	lsls	r3, r2
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e4:	4935      	ldr	r1, [pc, #212]	@ (80026bc <HAL_GPIO_Init+0x310>)
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	089b      	lsrs	r3, r3, #2
 80025ea:	3302      	adds	r3, #2
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	43db      	mvns	r3, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4013      	ands	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002616:	4a32      	ldr	r2, [pc, #200]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800261c:	4b30      	ldr	r3, [pc, #192]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002640:	4a27      	ldr	r2, [pc, #156]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002646:	4b26      	ldr	r3, [pc, #152]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	43db      	mvns	r3, r3
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	4013      	ands	r3, r2
 8002654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	43db      	mvns	r3, r3
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	4013      	ands	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4313      	orrs	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002694:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <HAL_GPIO_Init+0x334>)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3301      	adds	r3, #1
 800269e:	61fb      	str	r3, [r7, #28]
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	f67f ae90 	bls.w	80023c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3724      	adds	r7, #36	@ 0x24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40013800 	.word	0x40013800
 80026c0:	40020000 	.word	0x40020000
 80026c4:	40020400 	.word	0x40020400
 80026c8:	40020800 	.word	0x40020800
 80026cc:	40020c00 	.word	0x40020c00
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40021400 	.word	0x40021400
 80026d8:	40021800 	.word	0x40021800
 80026dc:	40021c00 	.word	0x40021c00
 80026e0:	40013c00 	.word	0x40013c00

080026e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e267      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d075      	beq.n	80027ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002702:	4b88      	ldr	r3, [pc, #544]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b04      	cmp	r3, #4
 800270c:	d00c      	beq.n	8002728 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800270e:	4b85      	ldr	r3, [pc, #532]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002716:	2b08      	cmp	r3, #8
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271a:	4b82      	ldr	r3, [pc, #520]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002722:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002726:	d10b      	bne.n	8002740 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	4b7e      	ldr	r3, [pc, #504]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d05b      	beq.n	80027ec <HAL_RCC_OscConfig+0x108>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d157      	bne.n	80027ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e242      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002748:	d106      	bne.n	8002758 <HAL_RCC_OscConfig+0x74>
 800274a:	4b76      	ldr	r3, [pc, #472]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a75      	ldr	r2, [pc, #468]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e01d      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002760:	d10c      	bne.n	800277c <HAL_RCC_OscConfig+0x98>
 8002762:	4b70      	ldr	r3, [pc, #448]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a6f      	ldr	r2, [pc, #444]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002768:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276c:	6013      	str	r3, [r2, #0]
 800276e:	4b6d      	ldr	r3, [pc, #436]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a6c      	ldr	r2, [pc, #432]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e00b      	b.n	8002794 <HAL_RCC_OscConfig+0xb0>
 800277c:	4b69      	ldr	r3, [pc, #420]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a68      	ldr	r2, [pc, #416]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a65      	ldr	r2, [pc, #404]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 800278e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279c:	f7fe ff00 	bl	80015a0 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027a4:	f7fe fefc 	bl	80015a0 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b64      	cmp	r3, #100	@ 0x64
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e207      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f0      	beq.n	80027a4 <HAL_RCC_OscConfig+0xc0>
 80027c2:	e014      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7fe feec 	bl	80015a0 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027cc:	f7fe fee8 	bl	80015a0 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	@ 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e1f3      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	4b51      	ldr	r3, [pc, #324]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0xe8>
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d063      	beq.n	80028c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00b      	beq.n	800281e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002806:	4b47      	ldr	r3, [pc, #284]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800280e:	2b08      	cmp	r3, #8
 8002810:	d11c      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	4b44      	ldr	r3, [pc, #272]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d116      	bne.n	800284c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800281e:	4b41      	ldr	r3, [pc, #260]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d005      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d001      	beq.n	8002836 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e1c7      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4937      	ldr	r1, [pc, #220]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002846:	4313      	orrs	r3, r2
 8002848:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e03a      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002854:	4b34      	ldr	r3, [pc, #208]	@ (8002928 <HAL_RCC_OscConfig+0x244>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285a:	f7fe fea1 	bl	80015a0 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002860:	e008      	b.n	8002874 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002862:	f7fe fe9d 	bl	80015a0 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d901      	bls.n	8002874 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	e1a8      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	4b2b      	ldr	r3, [pc, #172]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0f0      	beq.n	8002862 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002880:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	4925      	ldr	r1, [pc, #148]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	e015      	b.n	80028c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002896:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_OscConfig+0x244>)
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fe80 	bl	80015a0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe fe7c 	bl	80015a0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e187      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d1f0      	bne.n	80028a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d036      	beq.n	800293c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d016      	beq.n	8002904 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028d6:	4b15      	ldr	r3, [pc, #84]	@ (800292c <HAL_RCC_OscConfig+0x248>)
 80028d8:	2201      	movs	r2, #1
 80028da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe fe60 	bl	80015a0 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028e4:	f7fe fe5c 	bl	80015a0 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e167      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002924 <HAL_RCC_OscConfig+0x240>)
 80028f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x200>
 8002902:	e01b      	b.n	800293c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002904:	4b09      	ldr	r3, [pc, #36]	@ (800292c <HAL_RCC_OscConfig+0x248>)
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290a:	f7fe fe49 	bl	80015a0 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e00e      	b.n	8002930 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe fe45 	bl	80015a0 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d907      	bls.n	8002930 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e150      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
 8002924:	40023800 	.word	0x40023800
 8002928:	42470000 	.word	0x42470000
 800292c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002930:	4b88      	ldr	r3, [pc, #544]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002932:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1ea      	bne.n	8002912 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	f000 8097 	beq.w	8002a78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294e:	4b81      	ldr	r3, [pc, #516]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b7d      	ldr	r3, [pc, #500]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	4a7c      	ldr	r2, [pc, #496]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002968:	6413      	str	r3, [r2, #64]	@ 0x40
 800296a:	4b7a      	ldr	r3, [pc, #488]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002976:	2301      	movs	r3, #1
 8002978:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297a:	4b77      	ldr	r3, [pc, #476]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d118      	bne.n	80029b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002986:	4b74      	ldr	r3, [pc, #464]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a73      	ldr	r2, [pc, #460]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002992:	f7fe fe05 	bl	80015a0 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe fe01 	bl	80015a0 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e10c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002b58 <HAL_RCC_OscConfig+0x474>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x2ea>
 80029c0:	4b64      	ldr	r3, [pc, #400]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c4:	4a63      	ldr	r2, [pc, #396]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80029cc:	e01c      	b.n	8002a08 <HAL_RCC_OscConfig+0x324>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x30c>
 80029d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	4a5e      	ldr	r2, [pc, #376]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029dc:	f043 0304 	orr.w	r3, r3, #4
 80029e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0x324>
 80029f0:	4b58      	ldr	r3, [pc, #352]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a57      	ldr	r2, [pc, #348]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	4b55      	ldr	r3, [pc, #340]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a54      	ldr	r2, [pc, #336]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d015      	beq.n	8002a3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe fdc6 	bl	80015a0 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a16:	e00a      	b.n	8002a2e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a18:	f7fe fdc2 	bl	80015a0 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0cb      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	4b49      	ldr	r3, [pc, #292]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0ee      	beq.n	8002a18 <HAL_RCC_OscConfig+0x334>
 8002a3a:	e014      	b.n	8002a66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3c:	f7fe fdb0 	bl	80015a0 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a44:	f7fe fdac 	bl	80015a0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e0b5      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ee      	bne.n	8002a44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d105      	bne.n	8002a78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a70:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 80a1 	beq.w	8002bc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a82:	4b34      	ldr	r3, [pc, #208]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d05c      	beq.n	8002b48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d141      	bne.n	8002b1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a96:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe fd80 	bl	80015a0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7fe fd7c 	bl	80015a0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e087      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab6:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f0      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	019b      	lsls	r3, r3, #6
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	041b      	lsls	r3, r3, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae4:	061b      	lsls	r3, r3, #24
 8002ae6:	491b      	ldr	r1, [pc, #108]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aec:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fd55 	bl	80015a0 <HAL_GetTick>
 8002af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af8:	e008      	b.n	8002b0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002afa:	f7fe fd51 	bl	80015a0 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e05c      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0f0      	beq.n	8002afa <HAL_RCC_OscConfig+0x416>
 8002b18:	e054      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <HAL_RCC_OscConfig+0x478>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b20:	f7fe fd3e 	bl	80015a0 <HAL_GetTick>
 8002b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b28:	f7fe fd3a 	bl	80015a0 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e045      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f0      	bne.n	8002b28 <HAL_RCC_OscConfig+0x444>
 8002b46:	e03d      	b.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e038      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40007000 	.word	0x40007000
 8002b5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd0 <HAL_RCC_OscConfig+0x4ec>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d028      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d121      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d11a      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d111      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba6:	085b      	lsrs	r3, r3, #1
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e0cc      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be8:	4b68      	ldr	r3, [pc, #416]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d90c      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b65      	ldr	r3, [pc, #404]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b63      	ldr	r3, [pc, #396]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0b8      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d020      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c28:	4b59      	ldr	r3, [pc, #356]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	4a58      	ldr	r2, [pc, #352]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d005      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c40:	4b53      	ldr	r3, [pc, #332]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b50      	ldr	r3, [pc, #320]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	494d      	ldr	r1, [pc, #308]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d044      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c72:	4b47      	ldr	r3, [pc, #284]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d119      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e07f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d107      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b3f      	ldr	r3, [pc, #252]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d109      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e06f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e067      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb2:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4934      	ldr	r1, [pc, #208]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc4:	f7fe fc6c 	bl	80015a0 <HAL_GetTick>
 8002cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ccc:	f7fe fc68 	bl	80015a0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e04f      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 020c 	and.w	r2, r3, #12
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d1eb      	bne.n	8002ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf4:	4b25      	ldr	r3, [pc, #148]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d20c      	bcs.n	8002d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d02:	4b22      	ldr	r3, [pc, #136]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b20      	ldr	r3, [pc, #128]	@ (8002d8c <HAL_RCC_ClockConfig+0x1b8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e032      	b.n	8002d82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d008      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d28:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4916      	ldr	r1, [pc, #88]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	490e      	ldr	r1, [pc, #56]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d5a:	f000 f821 	bl	8002da0 <HAL_RCC_GetSysClockFreq>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	091b      	lsrs	r3, r3, #4
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	490a      	ldr	r1, [pc, #40]	@ (8002d94 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6c:	5ccb      	ldrb	r3, [r1, r3]
 8002d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d72:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d76:	4b09      	ldr	r3, [pc, #36]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe fbcc 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023c00 	.word	0x40023c00
 8002d90:	40023800 	.word	0x40023800
 8002d94:	08004700 	.word	0x08004700
 8002d98:	20000000 	.word	0x20000000
 8002d9c:	20000004 	.word	0x20000004

08002da0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da4:	b094      	sub	sp, #80	@ 0x50
 8002da6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dac:	2300      	movs	r3, #0
 8002dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002db0:	2300      	movs	r3, #0
 8002db2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002db8:	4b79      	ldr	r3, [pc, #484]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d00d      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	f200 80e1 	bhi.w	8002f8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dce:	2b04      	cmp	r3, #4
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd2:	e0db      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd4:	4b73      	ldr	r3, [pc, #460]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002dd8:	e0db      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dda:	4b73      	ldr	r3, [pc, #460]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002dde:	e0d8      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de0:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002de8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d063      	beq.n	8002ebe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df6:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	099b      	lsrs	r3, r3, #6
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e12:	4622      	mov	r2, r4
 8002e14:	462b      	mov	r3, r5
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	0159      	lsls	r1, r3, #5
 8002e20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e24:	0150      	lsls	r0, r2, #5
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4621      	mov	r1, r4
 8002e2c:	1a51      	subs	r1, r2, r1
 8002e2e:	6139      	str	r1, [r7, #16]
 8002e30:	4629      	mov	r1, r5
 8002e32:	eb63 0301 	sbc.w	r3, r3, r1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e44:	4659      	mov	r1, fp
 8002e46:	018b      	lsls	r3, r1, #6
 8002e48:	4651      	mov	r1, sl
 8002e4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e4e:	4651      	mov	r1, sl
 8002e50:	018a      	lsls	r2, r1, #6
 8002e52:	4651      	mov	r1, sl
 8002e54:	ebb2 0801 	subs.w	r8, r2, r1
 8002e58:	4659      	mov	r1, fp
 8002e5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	4623      	mov	r3, r4
 8002e78:	eb18 0303 	adds.w	r3, r8, r3
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	462b      	mov	r3, r5
 8002e80:	eb49 0303 	adc.w	r3, r9, r3
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	f04f 0300 	mov.w	r3, #0
 8002e8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e92:	4629      	mov	r1, r5
 8002e94:	024b      	lsls	r3, r1, #9
 8002e96:	4621      	mov	r1, r4
 8002e98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	024a      	lsls	r2, r1, #9
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eb0:	f7fd fe28 	bl	8000b04 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ebc:	e058      	b.n	8002f70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ebe:	4b38      	ldr	r3, [pc, #224]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	099b      	lsrs	r3, r3, #6
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	4611      	mov	r1, r2
 8002eca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ece:	623b      	str	r3, [r7, #32]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ed8:	4642      	mov	r2, r8
 8002eda:	464b      	mov	r3, r9
 8002edc:	f04f 0000 	mov.w	r0, #0
 8002ee0:	f04f 0100 	mov.w	r1, #0
 8002ee4:	0159      	lsls	r1, r3, #5
 8002ee6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eea:	0150      	lsls	r0, r2, #5
 8002eec:	4602      	mov	r2, r0
 8002eee:	460b      	mov	r3, r1
 8002ef0:	4641      	mov	r1, r8
 8002ef2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ef6:	4649      	mov	r1, r9
 8002ef8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f10:	ebb2 040a 	subs.w	r4, r2, sl
 8002f14:	eb63 050b 	sbc.w	r5, r3, fp
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	00eb      	lsls	r3, r5, #3
 8002f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f26:	00e2      	lsls	r2, r4, #3
 8002f28:	4614      	mov	r4, r2
 8002f2a:	461d      	mov	r5, r3
 8002f2c:	4643      	mov	r3, r8
 8002f2e:	18e3      	adds	r3, r4, r3
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	464b      	mov	r3, r9
 8002f34:	eb45 0303 	adc.w	r3, r5, r3
 8002f38:	607b      	str	r3, [r7, #4]
 8002f3a:	f04f 0200 	mov.w	r2, #0
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f46:	4629      	mov	r1, r5
 8002f48:	028b      	lsls	r3, r1, #10
 8002f4a:	4621      	mov	r1, r4
 8002f4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f50:	4621      	mov	r1, r4
 8002f52:	028a      	lsls	r2, r1, #10
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	61fa      	str	r2, [r7, #28]
 8002f60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f64:	f7fd fdce 	bl	8000b04 <__aeabi_uldivmod>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	0c1b      	lsrs	r3, r3, #16
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002f80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f8c:	4b05      	ldr	r3, [pc, #20]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3750      	adds	r7, #80	@ 0x50
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400
 8002fa8:	007a1200 	.word	0x007a1200

08002fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e041      	b.n	8003042 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d106      	bne.n	8002fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fe f9d2 	bl	800137c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3304      	adds	r3, #4
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4610      	mov	r0, r2
 8002fec:	f000 f95e 	bl	80032ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	d001      	beq.n	8003064 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e046      	b.n	80030f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a23      	ldr	r2, [pc, #140]	@ (8003100 <HAL_TIM_Base_Start+0xb4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d022      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800307e:	d01d      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1f      	ldr	r2, [pc, #124]	@ (8003104 <HAL_TIM_Base_Start+0xb8>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d018      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1e      	ldr	r2, [pc, #120]	@ (8003108 <HAL_TIM_Base_Start+0xbc>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d013      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a1c      	ldr	r2, [pc, #112]	@ (800310c <HAL_TIM_Base_Start+0xc0>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00e      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a1b      	ldr	r2, [pc, #108]	@ (8003110 <HAL_TIM_Base_Start+0xc4>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a19      	ldr	r2, [pc, #100]	@ (8003114 <HAL_TIM_Base_Start+0xc8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d004      	beq.n	80030bc <HAL_TIM_Base_Start+0x70>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a18      	ldr	r2, [pc, #96]	@ (8003118 <HAL_TIM_Base_Start+0xcc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d111      	bne.n	80030e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f003 0307 	and.w	r3, r3, #7
 80030c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b06      	cmp	r3, #6
 80030cc:	d010      	beq.n	80030f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f042 0201 	orr.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030de:	e007      	b.n	80030f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40000c00 	.word	0x40000c00
 8003110:	40010400 	.word	0x40010400
 8003114:	40014000 	.word	0x40014000
 8003118:	40001800 	.word	0x40001800

0800311c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_TIM_ConfigClockSource+0x1c>
 8003134:	2302      	movs	r3, #2
 8003136:	e0b4      	b.n	80032a2 <HAL_TIM_ConfigClockSource+0x186>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2202      	movs	r2, #2
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003156:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800315e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003170:	d03e      	beq.n	80031f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003172:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003176:	f200 8087 	bhi.w	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 800317a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800317e:	f000 8086 	beq.w	800328e <HAL_TIM_ConfigClockSource+0x172>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003186:	d87f      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003188:	2b70      	cmp	r3, #112	@ 0x70
 800318a:	d01a      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0xa6>
 800318c:	2b70      	cmp	r3, #112	@ 0x70
 800318e:	d87b      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003190:	2b60      	cmp	r3, #96	@ 0x60
 8003192:	d050      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x11a>
 8003194:	2b60      	cmp	r3, #96	@ 0x60
 8003196:	d877      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 8003198:	2b50      	cmp	r3, #80	@ 0x50
 800319a:	d03c      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0xfa>
 800319c:	2b50      	cmp	r3, #80	@ 0x50
 800319e:	d873      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031a0:	2b40      	cmp	r3, #64	@ 0x40
 80031a2:	d058      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x13a>
 80031a4:	2b40      	cmp	r3, #64	@ 0x40
 80031a6:	d86f      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b30      	cmp	r3, #48	@ 0x30
 80031aa:	d064      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031ac:	2b30      	cmp	r3, #48	@ 0x30
 80031ae:	d86b      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d060      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031b4:	2b20      	cmp	r3, #32
 80031b6:	d867      	bhi.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d05c      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031bc:	2b10      	cmp	r3, #16
 80031be:	d05a      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	e062      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031d2:	f000 f991 	bl	80034f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
      break;
 80031ee:	e04f      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003200:	f000 f97a 	bl	80034f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003212:	609a      	str	r2, [r3, #8]
      break;
 8003214:	e03c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 f8ee 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2150      	movs	r1, #80	@ 0x50
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f947 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8003234:	e02c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003242:	461a      	mov	r2, r3
 8003244:	f000 f90d 	bl	8003462 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2160      	movs	r1, #96	@ 0x60
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f937 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8003254:	e01c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	461a      	mov	r2, r3
 8003264:	f000 f8ce 	bl	8003404 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2140      	movs	r1, #64	@ 0x40
 800326e:	4618      	mov	r0, r3
 8003270:	f000 f927 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8003274:	e00c      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4619      	mov	r1, r3
 8003280:	4610      	mov	r0, r2
 8003282:	f000 f91e 	bl	80034c2 <TIM_ITRx_SetConfig>
      break;
 8003286:	e003      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e000      	b.n	8003290 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800328e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a46      	ldr	r2, [pc, #280]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d013      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032ca:	d00f      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a43      	ldr	r2, [pc, #268]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00b      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a42      	ldr	r2, [pc, #264]	@ (80033e0 <TIM_Base_SetConfig+0x134>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d007      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a41      	ldr	r2, [pc, #260]	@ (80033e4 <TIM_Base_SetConfig+0x138>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d003      	beq.n	80032ec <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a40      	ldr	r2, [pc, #256]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d108      	bne.n	80032fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a35      	ldr	r2, [pc, #212]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800330c:	d027      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a32      	ldr	r2, [pc, #200]	@ (80033dc <TIM_Base_SetConfig+0x130>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d023      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a31      	ldr	r2, [pc, #196]	@ (80033e0 <TIM_Base_SetConfig+0x134>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <TIM_Base_SetConfig+0x138>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d01b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2f      	ldr	r2, [pc, #188]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d017      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2e      	ldr	r2, [pc, #184]	@ (80033ec <TIM_Base_SetConfig+0x140>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d013      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2d      	ldr	r2, [pc, #180]	@ (80033f0 <TIM_Base_SetConfig+0x144>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00f      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2c      	ldr	r2, [pc, #176]	@ (80033f4 <TIM_Base_SetConfig+0x148>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d00b      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a2b      	ldr	r2, [pc, #172]	@ (80033f8 <TIM_Base_SetConfig+0x14c>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d007      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a2a      	ldr	r2, [pc, #168]	@ (80033fc <TIM_Base_SetConfig+0x150>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d003      	beq.n	800335e <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a29      	ldr	r2, [pc, #164]	@ (8003400 <TIM_Base_SetConfig+0x154>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d108      	bne.n	8003370 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a10      	ldr	r2, [pc, #64]	@ (80033d8 <TIM_Base_SetConfig+0x12c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0xf8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <TIM_Base_SetConfig+0x13c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d103      	bne.n	80033ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d105      	bne.n	80033ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f023 0201 	bic.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]
  }
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40010000 	.word	0x40010000
 80033dc:	40000400 	.word	0x40000400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	40010400 	.word	0x40010400
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800
 80033f8:	40001800 	.word	0x40001800
 80033fc:	40001c00 	.word	0x40001c00
 8003400:	40002000 	.word	0x40002000

08003404 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800342e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 030a 	bic.w	r3, r3, #10
 8003440:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
 8003448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	621a      	str	r2, [r3, #32]
}
 8003456:	bf00      	nop
 8003458:	371c      	adds	r7, #28
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003462:	b480      	push	{r7}
 8003464:	b087      	sub	sp, #28
 8003466:	af00      	add	r7, sp, #0
 8003468:	60f8      	str	r0, [r7, #12]
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	f023 0210 	bic.w	r2, r3, #16
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800348c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	031b      	lsls	r3, r3, #12
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800349e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
 80034ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	f043 0307 	orr.w	r3, r3, #7
 80034e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
 8003504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	021a      	lsls	r2, r3, #8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	431a      	orrs	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	609a      	str	r2, [r3, #8]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003548:	2b01      	cmp	r3, #1
 800354a:	d101      	bne.n	8003550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800354c:	2302      	movs	r3, #2
 800354e:	e05a      	b.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4313      	orrs	r3, r2
 8003580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a21      	ldr	r2, [pc, #132]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359c:	d01d      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a1b      	ldr	r2, [pc, #108]	@ (800361c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a18      	ldr	r2, [pc, #96]	@ (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a17      	ldr	r2, [pc, #92]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a15      	ldr	r2, [pc, #84]	@ (800362c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10c      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3714      	adds	r7, #20
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	40010000 	.word	0x40010000
 8003618:	40000400 	.word	0x40000400
 800361c:	40000800 	.word	0x40000800
 8003620:	40000c00 	.word	0x40000c00
 8003624:	40010400 	.word	0x40010400
 8003628:	40014000 	.word	0x40014000
 800362c:	40001800 	.word	0x40001800

08003630 <sin>:
 8003630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003632:	ec53 2b10 	vmov	r2, r3, d0
 8003636:	4826      	ldr	r0, [pc, #152]	@ (80036d0 <sin+0xa0>)
 8003638:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800363c:	4281      	cmp	r1, r0
 800363e:	d807      	bhi.n	8003650 <sin+0x20>
 8003640:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80036c8 <sin+0x98>
 8003644:	2000      	movs	r0, #0
 8003646:	b005      	add	sp, #20
 8003648:	f85d eb04 	ldr.w	lr, [sp], #4
 800364c:	f000 b90c 	b.w	8003868 <__kernel_sin>
 8003650:	4820      	ldr	r0, [pc, #128]	@ (80036d4 <sin+0xa4>)
 8003652:	4281      	cmp	r1, r0
 8003654:	d908      	bls.n	8003668 <sin+0x38>
 8003656:	4610      	mov	r0, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f7fc fdb9 	bl	80001d0 <__aeabi_dsub>
 800365e:	ec41 0b10 	vmov	d0, r0, r1
 8003662:	b005      	add	sp, #20
 8003664:	f85d fb04 	ldr.w	pc, [sp], #4
 8003668:	4668      	mov	r0, sp
 800366a:	f000 f9b9 	bl	80039e0 <__ieee754_rem_pio2>
 800366e:	f000 0003 	and.w	r0, r0, #3
 8003672:	2801      	cmp	r0, #1
 8003674:	d00c      	beq.n	8003690 <sin+0x60>
 8003676:	2802      	cmp	r0, #2
 8003678:	d011      	beq.n	800369e <sin+0x6e>
 800367a:	b9e8      	cbnz	r0, 80036b8 <sin+0x88>
 800367c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003680:	ed9d 0b00 	vldr	d0, [sp]
 8003684:	2001      	movs	r0, #1
 8003686:	f000 f8ef 	bl	8003868 <__kernel_sin>
 800368a:	ec51 0b10 	vmov	r0, r1, d0
 800368e:	e7e6      	b.n	800365e <sin+0x2e>
 8003690:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003694:	ed9d 0b00 	vldr	d0, [sp]
 8003698:	f000 f81e 	bl	80036d8 <__kernel_cos>
 800369c:	e7f5      	b.n	800368a <sin+0x5a>
 800369e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80036a2:	ed9d 0b00 	vldr	d0, [sp]
 80036a6:	2001      	movs	r0, #1
 80036a8:	f000 f8de 	bl	8003868 <__kernel_sin>
 80036ac:	ec53 2b10 	vmov	r2, r3, d0
 80036b0:	4610      	mov	r0, r2
 80036b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80036b6:	e7d2      	b.n	800365e <sin+0x2e>
 80036b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80036bc:	ed9d 0b00 	vldr	d0, [sp]
 80036c0:	f000 f80a 	bl	80036d8 <__kernel_cos>
 80036c4:	e7f2      	b.n	80036ac <sin+0x7c>
 80036c6:	bf00      	nop
	...
 80036d0:	3fe921fb 	.word	0x3fe921fb
 80036d4:	7fefffff 	.word	0x7fefffff

080036d8 <__kernel_cos>:
 80036d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	ec57 6b10 	vmov	r6, r7, d0
 80036e0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80036e4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80036e8:	ed8d 1b00 	vstr	d1, [sp]
 80036ec:	d206      	bcs.n	80036fc <__kernel_cos+0x24>
 80036ee:	4630      	mov	r0, r6
 80036f0:	4639      	mov	r1, r7
 80036f2:	f7fd f9bf 	bl	8000a74 <__aeabi_d2iz>
 80036f6:	2800      	cmp	r0, #0
 80036f8:	f000 8088 	beq.w	800380c <__kernel_cos+0x134>
 80036fc:	4632      	mov	r2, r6
 80036fe:	463b      	mov	r3, r7
 8003700:	4630      	mov	r0, r6
 8003702:	4639      	mov	r1, r7
 8003704:	f7fc ff1c 	bl	8000540 <__aeabi_dmul>
 8003708:	4b51      	ldr	r3, [pc, #324]	@ (8003850 <__kernel_cos+0x178>)
 800370a:	2200      	movs	r2, #0
 800370c:	4604      	mov	r4, r0
 800370e:	460d      	mov	r5, r1
 8003710:	f7fc ff16 	bl	8000540 <__aeabi_dmul>
 8003714:	a340      	add	r3, pc, #256	@ (adr r3, 8003818 <__kernel_cos+0x140>)
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	4682      	mov	sl, r0
 800371c:	468b      	mov	fp, r1
 800371e:	4620      	mov	r0, r4
 8003720:	4629      	mov	r1, r5
 8003722:	f7fc ff0d 	bl	8000540 <__aeabi_dmul>
 8003726:	a33e      	add	r3, pc, #248	@ (adr r3, 8003820 <__kernel_cos+0x148>)
 8003728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372c:	f7fc fd52 	bl	80001d4 <__adddf3>
 8003730:	4622      	mov	r2, r4
 8003732:	462b      	mov	r3, r5
 8003734:	f7fc ff04 	bl	8000540 <__aeabi_dmul>
 8003738:	a33b      	add	r3, pc, #236	@ (adr r3, 8003828 <__kernel_cos+0x150>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc fd47 	bl	80001d0 <__aeabi_dsub>
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	f7fc fefb 	bl	8000540 <__aeabi_dmul>
 800374a:	a339      	add	r3, pc, #228	@ (adr r3, 8003830 <__kernel_cos+0x158>)
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f7fc fd40 	bl	80001d4 <__adddf3>
 8003754:	4622      	mov	r2, r4
 8003756:	462b      	mov	r3, r5
 8003758:	f7fc fef2 	bl	8000540 <__aeabi_dmul>
 800375c:	a336      	add	r3, pc, #216	@ (adr r3, 8003838 <__kernel_cos+0x160>)
 800375e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003762:	f7fc fd35 	bl	80001d0 <__aeabi_dsub>
 8003766:	4622      	mov	r2, r4
 8003768:	462b      	mov	r3, r5
 800376a:	f7fc fee9 	bl	8000540 <__aeabi_dmul>
 800376e:	a334      	add	r3, pc, #208	@ (adr r3, 8003840 <__kernel_cos+0x168>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	f7fc fd2e 	bl	80001d4 <__adddf3>
 8003778:	4622      	mov	r2, r4
 800377a:	462b      	mov	r3, r5
 800377c:	f7fc fee0 	bl	8000540 <__aeabi_dmul>
 8003780:	4622      	mov	r2, r4
 8003782:	462b      	mov	r3, r5
 8003784:	f7fc fedc 	bl	8000540 <__aeabi_dmul>
 8003788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800378c:	4604      	mov	r4, r0
 800378e:	460d      	mov	r5, r1
 8003790:	4630      	mov	r0, r6
 8003792:	4639      	mov	r1, r7
 8003794:	f7fc fed4 	bl	8000540 <__aeabi_dmul>
 8003798:	460b      	mov	r3, r1
 800379a:	4602      	mov	r2, r0
 800379c:	4629      	mov	r1, r5
 800379e:	4620      	mov	r0, r4
 80037a0:	f7fc fd16 	bl	80001d0 <__aeabi_dsub>
 80037a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003854 <__kernel_cos+0x17c>)
 80037a6:	4598      	cmp	r8, r3
 80037a8:	4606      	mov	r6, r0
 80037aa:	460f      	mov	r7, r1
 80037ac:	d810      	bhi.n	80037d0 <__kernel_cos+0xf8>
 80037ae:	4602      	mov	r2, r0
 80037b0:	460b      	mov	r3, r1
 80037b2:	4650      	mov	r0, sl
 80037b4:	4659      	mov	r1, fp
 80037b6:	f7fc fd0b 	bl	80001d0 <__aeabi_dsub>
 80037ba:	460b      	mov	r3, r1
 80037bc:	4926      	ldr	r1, [pc, #152]	@ (8003858 <__kernel_cos+0x180>)
 80037be:	4602      	mov	r2, r0
 80037c0:	2000      	movs	r0, #0
 80037c2:	f7fc fd05 	bl	80001d0 <__aeabi_dsub>
 80037c6:	ec41 0b10 	vmov	d0, r0, r1
 80037ca:	b003      	add	sp, #12
 80037cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037d0:	4b22      	ldr	r3, [pc, #136]	@ (800385c <__kernel_cos+0x184>)
 80037d2:	4921      	ldr	r1, [pc, #132]	@ (8003858 <__kernel_cos+0x180>)
 80037d4:	4598      	cmp	r8, r3
 80037d6:	bf8c      	ite	hi
 80037d8:	4d21      	ldrhi	r5, [pc, #132]	@ (8003860 <__kernel_cos+0x188>)
 80037da:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80037de:	2400      	movs	r4, #0
 80037e0:	4622      	mov	r2, r4
 80037e2:	462b      	mov	r3, r5
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fc fcf3 	bl	80001d0 <__aeabi_dsub>
 80037ea:	4622      	mov	r2, r4
 80037ec:	4680      	mov	r8, r0
 80037ee:	4689      	mov	r9, r1
 80037f0:	462b      	mov	r3, r5
 80037f2:	4650      	mov	r0, sl
 80037f4:	4659      	mov	r1, fp
 80037f6:	f7fc fceb 	bl	80001d0 <__aeabi_dsub>
 80037fa:	4632      	mov	r2, r6
 80037fc:	463b      	mov	r3, r7
 80037fe:	f7fc fce7 	bl	80001d0 <__aeabi_dsub>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4640      	mov	r0, r8
 8003808:	4649      	mov	r1, r9
 800380a:	e7da      	b.n	80037c2 <__kernel_cos+0xea>
 800380c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003848 <__kernel_cos+0x170>
 8003810:	e7db      	b.n	80037ca <__kernel_cos+0xf2>
 8003812:	bf00      	nop
 8003814:	f3af 8000 	nop.w
 8003818:	be8838d4 	.word	0xbe8838d4
 800381c:	bda8fae9 	.word	0xbda8fae9
 8003820:	bdb4b1c4 	.word	0xbdb4b1c4
 8003824:	3e21ee9e 	.word	0x3e21ee9e
 8003828:	809c52ad 	.word	0x809c52ad
 800382c:	3e927e4f 	.word	0x3e927e4f
 8003830:	19cb1590 	.word	0x19cb1590
 8003834:	3efa01a0 	.word	0x3efa01a0
 8003838:	16c15177 	.word	0x16c15177
 800383c:	3f56c16c 	.word	0x3f56c16c
 8003840:	5555554c 	.word	0x5555554c
 8003844:	3fa55555 	.word	0x3fa55555
 8003848:	00000000 	.word	0x00000000
 800384c:	3ff00000 	.word	0x3ff00000
 8003850:	3fe00000 	.word	0x3fe00000
 8003854:	3fd33332 	.word	0x3fd33332
 8003858:	3ff00000 	.word	0x3ff00000
 800385c:	3fe90000 	.word	0x3fe90000
 8003860:	3fd20000 	.word	0x3fd20000
 8003864:	00000000 	.word	0x00000000

08003868 <__kernel_sin>:
 8003868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800386c:	ec55 4b10 	vmov	r4, r5, d0
 8003870:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003874:	b085      	sub	sp, #20
 8003876:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800387a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800387e:	4680      	mov	r8, r0
 8003880:	d205      	bcs.n	800388e <__kernel_sin+0x26>
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fd f8f5 	bl	8000a74 <__aeabi_d2iz>
 800388a:	2800      	cmp	r0, #0
 800388c:	d052      	beq.n	8003934 <__kernel_sin+0xcc>
 800388e:	4622      	mov	r2, r4
 8003890:	462b      	mov	r3, r5
 8003892:	4620      	mov	r0, r4
 8003894:	4629      	mov	r1, r5
 8003896:	f7fc fe53 	bl	8000540 <__aeabi_dmul>
 800389a:	4682      	mov	sl, r0
 800389c:	468b      	mov	fp, r1
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4620      	mov	r0, r4
 80038a4:	4629      	mov	r1, r5
 80038a6:	f7fc fe4b 	bl	8000540 <__aeabi_dmul>
 80038aa:	a342      	add	r3, pc, #264	@ (adr r3, 80039b4 <__kernel_sin+0x14c>)
 80038ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b0:	e9cd 0100 	strd	r0, r1, [sp]
 80038b4:	4650      	mov	r0, sl
 80038b6:	4659      	mov	r1, fp
 80038b8:	f7fc fe42 	bl	8000540 <__aeabi_dmul>
 80038bc:	a33f      	add	r3, pc, #252	@ (adr r3, 80039bc <__kernel_sin+0x154>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f7fc fc85 	bl	80001d0 <__aeabi_dsub>
 80038c6:	4652      	mov	r2, sl
 80038c8:	465b      	mov	r3, fp
 80038ca:	f7fc fe39 	bl	8000540 <__aeabi_dmul>
 80038ce:	a33d      	add	r3, pc, #244	@ (adr r3, 80039c4 <__kernel_sin+0x15c>)
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f7fc fc7e 	bl	80001d4 <__adddf3>
 80038d8:	4652      	mov	r2, sl
 80038da:	465b      	mov	r3, fp
 80038dc:	f7fc fe30 	bl	8000540 <__aeabi_dmul>
 80038e0:	a33a      	add	r3, pc, #232	@ (adr r3, 80039cc <__kernel_sin+0x164>)
 80038e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e6:	f7fc fc73 	bl	80001d0 <__aeabi_dsub>
 80038ea:	4652      	mov	r2, sl
 80038ec:	465b      	mov	r3, fp
 80038ee:	f7fc fe27 	bl	8000540 <__aeabi_dmul>
 80038f2:	a338      	add	r3, pc, #224	@ (adr r3, 80039d4 <__kernel_sin+0x16c>)
 80038f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f8:	f7fc fc6c 	bl	80001d4 <__adddf3>
 80038fc:	4606      	mov	r6, r0
 80038fe:	460f      	mov	r7, r1
 8003900:	f1b8 0f00 	cmp.w	r8, #0
 8003904:	d11b      	bne.n	800393e <__kernel_sin+0xd6>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4650      	mov	r0, sl
 800390c:	4659      	mov	r1, fp
 800390e:	f7fc fe17 	bl	8000540 <__aeabi_dmul>
 8003912:	a325      	add	r3, pc, #148	@ (adr r3, 80039a8 <__kernel_sin+0x140>)
 8003914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003918:	f7fc fc5a 	bl	80001d0 <__aeabi_dsub>
 800391c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003920:	f7fc fe0e 	bl	8000540 <__aeabi_dmul>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	4620      	mov	r0, r4
 800392a:	4629      	mov	r1, r5
 800392c:	f7fc fc52 	bl	80001d4 <__adddf3>
 8003930:	4604      	mov	r4, r0
 8003932:	460d      	mov	r5, r1
 8003934:	ec45 4b10 	vmov	d0, r4, r5
 8003938:	b005      	add	sp, #20
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800393e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <__kernel_sin+0x148>)
 8003944:	2200      	movs	r2, #0
 8003946:	f7fc fdfb 	bl	8000540 <__aeabi_dmul>
 800394a:	4632      	mov	r2, r6
 800394c:	4680      	mov	r8, r0
 800394e:	4689      	mov	r9, r1
 8003950:	463b      	mov	r3, r7
 8003952:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003956:	f7fc fdf3 	bl	8000540 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4640      	mov	r0, r8
 8003960:	4649      	mov	r1, r9
 8003962:	f7fc fc35 	bl	80001d0 <__aeabi_dsub>
 8003966:	4652      	mov	r2, sl
 8003968:	465b      	mov	r3, fp
 800396a:	f7fc fde9 	bl	8000540 <__aeabi_dmul>
 800396e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003972:	f7fc fc2d 	bl	80001d0 <__aeabi_dsub>
 8003976:	a30c      	add	r3, pc, #48	@ (adr r3, 80039a8 <__kernel_sin+0x140>)
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	4606      	mov	r6, r0
 800397e:	460f      	mov	r7, r1
 8003980:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003984:	f7fc fddc 	bl	8000540 <__aeabi_dmul>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4630      	mov	r0, r6
 800398e:	4639      	mov	r1, r7
 8003990:	f7fc fc20 	bl	80001d4 <__adddf3>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4620      	mov	r0, r4
 800399a:	4629      	mov	r1, r5
 800399c:	f7fc fc18 	bl	80001d0 <__aeabi_dsub>
 80039a0:	e7c6      	b.n	8003930 <__kernel_sin+0xc8>
 80039a2:	bf00      	nop
 80039a4:	f3af 8000 	nop.w
 80039a8:	55555549 	.word	0x55555549
 80039ac:	3fc55555 	.word	0x3fc55555
 80039b0:	3fe00000 	.word	0x3fe00000
 80039b4:	5acfd57c 	.word	0x5acfd57c
 80039b8:	3de5d93a 	.word	0x3de5d93a
 80039bc:	8a2b9ceb 	.word	0x8a2b9ceb
 80039c0:	3e5ae5e6 	.word	0x3e5ae5e6
 80039c4:	57b1fe7d 	.word	0x57b1fe7d
 80039c8:	3ec71de3 	.word	0x3ec71de3
 80039cc:	19c161d5 	.word	0x19c161d5
 80039d0:	3f2a01a0 	.word	0x3f2a01a0
 80039d4:	1110f8a6 	.word	0x1110f8a6
 80039d8:	3f811111 	.word	0x3f811111
 80039dc:	00000000 	.word	0x00000000

080039e0 <__ieee754_rem_pio2>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	ec57 6b10 	vmov	r6, r7, d0
 80039e8:	4bc5      	ldr	r3, [pc, #788]	@ (8003d00 <__ieee754_rem_pio2+0x320>)
 80039ea:	b08d      	sub	sp, #52	@ 0x34
 80039ec:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80039f0:	4598      	cmp	r8, r3
 80039f2:	4604      	mov	r4, r0
 80039f4:	9704      	str	r7, [sp, #16]
 80039f6:	d807      	bhi.n	8003a08 <__ieee754_rem_pio2+0x28>
 80039f8:	2200      	movs	r2, #0
 80039fa:	2300      	movs	r3, #0
 80039fc:	ed80 0b00 	vstr	d0, [r0]
 8003a00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003a04:	2500      	movs	r5, #0
 8003a06:	e028      	b.n	8003a5a <__ieee754_rem_pio2+0x7a>
 8003a08:	4bbe      	ldr	r3, [pc, #760]	@ (8003d04 <__ieee754_rem_pio2+0x324>)
 8003a0a:	4598      	cmp	r8, r3
 8003a0c:	d878      	bhi.n	8003b00 <__ieee754_rem_pio2+0x120>
 8003a0e:	9b04      	ldr	r3, [sp, #16]
 8003a10:	4dbd      	ldr	r5, [pc, #756]	@ (8003d08 <__ieee754_rem_pio2+0x328>)
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	4630      	mov	r0, r6
 8003a16:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003cc8 <__ieee754_rem_pio2+0x2e8>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	dd38      	ble.n	8003a92 <__ieee754_rem_pio2+0xb2>
 8003a20:	f7fc fbd6 	bl	80001d0 <__aeabi_dsub>
 8003a24:	45a8      	cmp	r8, r5
 8003a26:	4606      	mov	r6, r0
 8003a28:	460f      	mov	r7, r1
 8003a2a:	d01a      	beq.n	8003a62 <__ieee754_rem_pio2+0x82>
 8003a2c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003cd0 <__ieee754_rem_pio2+0x2f0>)
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	f7fc fbcd 	bl	80001d0 <__aeabi_dsub>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	4689      	mov	r9, r1
 8003a3e:	4630      	mov	r0, r6
 8003a40:	4639      	mov	r1, r7
 8003a42:	f7fc fbc5 	bl	80001d0 <__aeabi_dsub>
 8003a46:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003cd0 <__ieee754_rem_pio2+0x2f0>)
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f7fc fbc0 	bl	80001d0 <__aeabi_dsub>
 8003a50:	e9c4 8900 	strd	r8, r9, [r4]
 8003a54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003a58:	2501      	movs	r5, #1
 8003a5a:	4628      	mov	r0, r5
 8003a5c:	b00d      	add	sp, #52	@ 0x34
 8003a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a62:	a39d      	add	r3, pc, #628	@ (adr r3, 8003cd8 <__ieee754_rem_pio2+0x2f8>)
 8003a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a68:	f7fc fbb2 	bl	80001d0 <__aeabi_dsub>
 8003a6c:	a39c      	add	r3, pc, #624	@ (adr r3, 8003ce0 <__ieee754_rem_pio2+0x300>)
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	4606      	mov	r6, r0
 8003a74:	460f      	mov	r7, r1
 8003a76:	f7fc fbab 	bl	80001d0 <__aeabi_dsub>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4680      	mov	r8, r0
 8003a80:	4689      	mov	r9, r1
 8003a82:	4630      	mov	r0, r6
 8003a84:	4639      	mov	r1, r7
 8003a86:	f7fc fba3 	bl	80001d0 <__aeabi_dsub>
 8003a8a:	a395      	add	r3, pc, #596	@ (adr r3, 8003ce0 <__ieee754_rem_pio2+0x300>)
 8003a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a90:	e7dc      	b.n	8003a4c <__ieee754_rem_pio2+0x6c>
 8003a92:	f7fc fb9f 	bl	80001d4 <__adddf3>
 8003a96:	45a8      	cmp	r8, r5
 8003a98:	4606      	mov	r6, r0
 8003a9a:	460f      	mov	r7, r1
 8003a9c:	d018      	beq.n	8003ad0 <__ieee754_rem_pio2+0xf0>
 8003a9e:	a38c      	add	r3, pc, #560	@ (adr r3, 8003cd0 <__ieee754_rem_pio2+0x2f0>)
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	f7fc fb96 	bl	80001d4 <__adddf3>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4680      	mov	r8, r0
 8003aae:	4689      	mov	r9, r1
 8003ab0:	4630      	mov	r0, r6
 8003ab2:	4639      	mov	r1, r7
 8003ab4:	f7fc fb8c 	bl	80001d0 <__aeabi_dsub>
 8003ab8:	a385      	add	r3, pc, #532	@ (adr r3, 8003cd0 <__ieee754_rem_pio2+0x2f0>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fb89 	bl	80001d4 <__adddf3>
 8003ac2:	f04f 35ff 	mov.w	r5, #4294967295
 8003ac6:	e9c4 8900 	strd	r8, r9, [r4]
 8003aca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ace:	e7c4      	b.n	8003a5a <__ieee754_rem_pio2+0x7a>
 8003ad0:	a381      	add	r3, pc, #516	@ (adr r3, 8003cd8 <__ieee754_rem_pio2+0x2f8>)
 8003ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad6:	f7fc fb7d 	bl	80001d4 <__adddf3>
 8003ada:	a381      	add	r3, pc, #516	@ (adr r3, 8003ce0 <__ieee754_rem_pio2+0x300>)
 8003adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	460f      	mov	r7, r1
 8003ae4:	f7fc fb76 	bl	80001d4 <__adddf3>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4680      	mov	r8, r0
 8003aee:	4689      	mov	r9, r1
 8003af0:	4630      	mov	r0, r6
 8003af2:	4639      	mov	r1, r7
 8003af4:	f7fc fb6c 	bl	80001d0 <__aeabi_dsub>
 8003af8:	a379      	add	r3, pc, #484	@ (adr r3, 8003ce0 <__ieee754_rem_pio2+0x300>)
 8003afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afe:	e7de      	b.n	8003abe <__ieee754_rem_pio2+0xde>
 8003b00:	4b82      	ldr	r3, [pc, #520]	@ (8003d0c <__ieee754_rem_pio2+0x32c>)
 8003b02:	4598      	cmp	r8, r3
 8003b04:	f200 80d1 	bhi.w	8003caa <__ieee754_rem_pio2+0x2ca>
 8003b08:	f000 f966 	bl	8003dd8 <fabs>
 8003b0c:	ec57 6b10 	vmov	r6, r7, d0
 8003b10:	a375      	add	r3, pc, #468	@ (adr r3, 8003ce8 <__ieee754_rem_pio2+0x308>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	4630      	mov	r0, r6
 8003b18:	4639      	mov	r1, r7
 8003b1a:	f7fc fd11 	bl	8000540 <__aeabi_dmul>
 8003b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8003d10 <__ieee754_rem_pio2+0x330>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	f7fc fb57 	bl	80001d4 <__adddf3>
 8003b26:	f7fc ffa5 	bl	8000a74 <__aeabi_d2iz>
 8003b2a:	4605      	mov	r5, r0
 8003b2c:	f7fc fc9e 	bl	800046c <__aeabi_i2d>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003b38:	a363      	add	r3, pc, #396	@ (adr r3, 8003cc8 <__ieee754_rem_pio2+0x2e8>)
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	f7fc fcff 	bl	8000540 <__aeabi_dmul>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4630      	mov	r0, r6
 8003b48:	4639      	mov	r1, r7
 8003b4a:	f7fc fb41 	bl	80001d0 <__aeabi_dsub>
 8003b4e:	a360      	add	r3, pc, #384	@ (adr r3, 8003cd0 <__ieee754_rem_pio2+0x2f0>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	4682      	mov	sl, r0
 8003b56:	468b      	mov	fp, r1
 8003b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b5c:	f7fc fcf0 	bl	8000540 <__aeabi_dmul>
 8003b60:	2d1f      	cmp	r5, #31
 8003b62:	4606      	mov	r6, r0
 8003b64:	460f      	mov	r7, r1
 8003b66:	dc0c      	bgt.n	8003b82 <__ieee754_rem_pio2+0x1a2>
 8003b68:	4b6a      	ldr	r3, [pc, #424]	@ (8003d14 <__ieee754_rem_pio2+0x334>)
 8003b6a:	1e6a      	subs	r2, r5, #1
 8003b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b70:	4543      	cmp	r3, r8
 8003b72:	d006      	beq.n	8003b82 <__ieee754_rem_pio2+0x1a2>
 8003b74:	4632      	mov	r2, r6
 8003b76:	463b      	mov	r3, r7
 8003b78:	4650      	mov	r0, sl
 8003b7a:	4659      	mov	r1, fp
 8003b7c:	f7fc fb28 	bl	80001d0 <__aeabi_dsub>
 8003b80:	e00e      	b.n	8003ba0 <__ieee754_rem_pio2+0x1c0>
 8003b82:	463b      	mov	r3, r7
 8003b84:	4632      	mov	r2, r6
 8003b86:	4650      	mov	r0, sl
 8003b88:	4659      	mov	r1, fp
 8003b8a:	f7fc fb21 	bl	80001d0 <__aeabi_dsub>
 8003b8e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003b92:	9305      	str	r3, [sp, #20]
 8003b94:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003b98:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003b9c:	2b10      	cmp	r3, #16
 8003b9e:	dc02      	bgt.n	8003ba6 <__ieee754_rem_pio2+0x1c6>
 8003ba0:	e9c4 0100 	strd	r0, r1, [r4]
 8003ba4:	e039      	b.n	8003c1a <__ieee754_rem_pio2+0x23a>
 8003ba6:	a34c      	add	r3, pc, #304	@ (adr r3, 8003cd8 <__ieee754_rem_pio2+0x2f8>)
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bb0:	f7fc fcc6 	bl	8000540 <__aeabi_dmul>
 8003bb4:	4606      	mov	r6, r0
 8003bb6:	460f      	mov	r7, r1
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4650      	mov	r0, sl
 8003bbe:	4659      	mov	r1, fp
 8003bc0:	f7fc fb06 	bl	80001d0 <__aeabi_dsub>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4680      	mov	r8, r0
 8003bca:	4689      	mov	r9, r1
 8003bcc:	4650      	mov	r0, sl
 8003bce:	4659      	mov	r1, fp
 8003bd0:	f7fc fafe 	bl	80001d0 <__aeabi_dsub>
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	463b      	mov	r3, r7
 8003bd8:	f7fc fafa 	bl	80001d0 <__aeabi_dsub>
 8003bdc:	a340      	add	r3, pc, #256	@ (adr r3, 8003ce0 <__ieee754_rem_pio2+0x300>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	4606      	mov	r6, r0
 8003be4:	460f      	mov	r7, r1
 8003be6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003bea:	f7fc fca9 	bl	8000540 <__aeabi_dmul>
 8003bee:	4632      	mov	r2, r6
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	f7fc faed 	bl	80001d0 <__aeabi_dsub>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	4640      	mov	r0, r8
 8003c00:	4649      	mov	r1, r9
 8003c02:	f7fc fae5 	bl	80001d0 <__aeabi_dsub>
 8003c06:	9a05      	ldr	r2, [sp, #20]
 8003c08:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b31      	cmp	r3, #49	@ 0x31
 8003c10:	dc20      	bgt.n	8003c54 <__ieee754_rem_pio2+0x274>
 8003c12:	e9c4 0100 	strd	r0, r1, [r4]
 8003c16:	46c2      	mov	sl, r8
 8003c18:	46cb      	mov	fp, r9
 8003c1a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003c1e:	4650      	mov	r0, sl
 8003c20:	4642      	mov	r2, r8
 8003c22:	464b      	mov	r3, r9
 8003c24:	4659      	mov	r1, fp
 8003c26:	f7fc fad3 	bl	80001d0 <__aeabi_dsub>
 8003c2a:	463b      	mov	r3, r7
 8003c2c:	4632      	mov	r2, r6
 8003c2e:	f7fc facf 	bl	80001d0 <__aeabi_dsub>
 8003c32:	9b04      	ldr	r3, [sp, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003c3a:	f6bf af0e 	bge.w	8003a5a <__ieee754_rem_pio2+0x7a>
 8003c3e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003c42:	6063      	str	r3, [r4, #4]
 8003c44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003c48:	f8c4 8000 	str.w	r8, [r4]
 8003c4c:	60a0      	str	r0, [r4, #8]
 8003c4e:	60e3      	str	r3, [r4, #12]
 8003c50:	426d      	negs	r5, r5
 8003c52:	e702      	b.n	8003a5a <__ieee754_rem_pio2+0x7a>
 8003c54:	a326      	add	r3, pc, #152	@ (adr r3, 8003cf0 <__ieee754_rem_pio2+0x310>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c5e:	f7fc fc6f 	bl	8000540 <__aeabi_dmul>
 8003c62:	4606      	mov	r6, r0
 8003c64:	460f      	mov	r7, r1
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	f7fc faaf 	bl	80001d0 <__aeabi_dsub>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4682      	mov	sl, r0
 8003c78:	468b      	mov	fp, r1
 8003c7a:	4640      	mov	r0, r8
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	f7fc faa7 	bl	80001d0 <__aeabi_dsub>
 8003c82:	4632      	mov	r2, r6
 8003c84:	463b      	mov	r3, r7
 8003c86:	f7fc faa3 	bl	80001d0 <__aeabi_dsub>
 8003c8a:	a31b      	add	r3, pc, #108	@ (adr r3, 8003cf8 <__ieee754_rem_pio2+0x318>)
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	4606      	mov	r6, r0
 8003c92:	460f      	mov	r7, r1
 8003c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c98:	f7fc fc52 	bl	8000540 <__aeabi_dmul>
 8003c9c:	4632      	mov	r2, r6
 8003c9e:	463b      	mov	r3, r7
 8003ca0:	f7fc fa96 	bl	80001d0 <__aeabi_dsub>
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	460f      	mov	r7, r1
 8003ca8:	e764      	b.n	8003b74 <__ieee754_rem_pio2+0x194>
 8003caa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <__ieee754_rem_pio2+0x338>)
 8003cac:	4598      	cmp	r8, r3
 8003cae:	d935      	bls.n	8003d1c <__ieee754_rem_pio2+0x33c>
 8003cb0:	4632      	mov	r2, r6
 8003cb2:	463b      	mov	r3, r7
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	f7fc fa8a 	bl	80001d0 <__aeabi_dsub>
 8003cbc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003cc0:	e9c4 0100 	strd	r0, r1, [r4]
 8003cc4:	e69e      	b.n	8003a04 <__ieee754_rem_pio2+0x24>
 8003cc6:	bf00      	nop
 8003cc8:	54400000 	.word	0x54400000
 8003ccc:	3ff921fb 	.word	0x3ff921fb
 8003cd0:	1a626331 	.word	0x1a626331
 8003cd4:	3dd0b461 	.word	0x3dd0b461
 8003cd8:	1a600000 	.word	0x1a600000
 8003cdc:	3dd0b461 	.word	0x3dd0b461
 8003ce0:	2e037073 	.word	0x2e037073
 8003ce4:	3ba3198a 	.word	0x3ba3198a
 8003ce8:	6dc9c883 	.word	0x6dc9c883
 8003cec:	3fe45f30 	.word	0x3fe45f30
 8003cf0:	2e000000 	.word	0x2e000000
 8003cf4:	3ba3198a 	.word	0x3ba3198a
 8003cf8:	252049c1 	.word	0x252049c1
 8003cfc:	397b839a 	.word	0x397b839a
 8003d00:	3fe921fb 	.word	0x3fe921fb
 8003d04:	4002d97b 	.word	0x4002d97b
 8003d08:	3ff921fb 	.word	0x3ff921fb
 8003d0c:	413921fb 	.word	0x413921fb
 8003d10:	3fe00000 	.word	0x3fe00000
 8003d14:	08004718 	.word	0x08004718
 8003d18:	7fefffff 	.word	0x7fefffff
 8003d1c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003d20:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003d24:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003d28:	4630      	mov	r0, r6
 8003d2a:	460f      	mov	r7, r1
 8003d2c:	f7fc fea2 	bl	8000a74 <__aeabi_d2iz>
 8003d30:	f7fc fb9c 	bl	800046c <__aeabi_i2d>
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4630      	mov	r0, r6
 8003d3a:	4639      	mov	r1, r7
 8003d3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003d40:	f7fc fa46 	bl	80001d0 <__aeabi_dsub>
 8003d44:	4b22      	ldr	r3, [pc, #136]	@ (8003dd0 <__ieee754_rem_pio2+0x3f0>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	f7fc fbfa 	bl	8000540 <__aeabi_dmul>
 8003d4c:	460f      	mov	r7, r1
 8003d4e:	4606      	mov	r6, r0
 8003d50:	f7fc fe90 	bl	8000a74 <__aeabi_d2iz>
 8003d54:	f7fc fb8a 	bl	800046c <__aeabi_i2d>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4630      	mov	r0, r6
 8003d5e:	4639      	mov	r1, r7
 8003d60:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d64:	f7fc fa34 	bl	80001d0 <__aeabi_dsub>
 8003d68:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <__ieee754_rem_pio2+0x3f0>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f7fc fbe8 	bl	8000540 <__aeabi_dmul>
 8003d70:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003d74:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003d78:	f04f 0803 	mov.w	r8, #3
 8003d7c:	2600      	movs	r6, #0
 8003d7e:	2700      	movs	r7, #0
 8003d80:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003d84:	4632      	mov	r2, r6
 8003d86:	463b      	mov	r3, r7
 8003d88:	46c2      	mov	sl, r8
 8003d8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8003d8e:	f7fc fe3f 	bl	8000a10 <__aeabi_dcmpeq>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d1f4      	bne.n	8003d80 <__ieee754_rem_pio2+0x3a0>
 8003d96:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd4 <__ieee754_rem_pio2+0x3f4>)
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	462a      	mov	r2, r5
 8003da0:	4653      	mov	r3, sl
 8003da2:	4621      	mov	r1, r4
 8003da4:	a806      	add	r0, sp, #24
 8003da6:	f000 f81f 	bl	8003de8 <__kernel_rem_pio2>
 8003daa:	9b04      	ldr	r3, [sp, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	4605      	mov	r5, r0
 8003db0:	f6bf ae53 	bge.w	8003a5a <__ieee754_rem_pio2+0x7a>
 8003db4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003db8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003dbc:	e9c4 2300 	strd	r2, r3, [r4]
 8003dc0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003dc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003dc8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003dcc:	e740      	b.n	8003c50 <__ieee754_rem_pio2+0x270>
 8003dce:	bf00      	nop
 8003dd0:	41700000 	.word	0x41700000
 8003dd4:	08004798 	.word	0x08004798

08003dd8 <fabs>:
 8003dd8:	ec51 0b10 	vmov	r0, r1, d0
 8003ddc:	4602      	mov	r2, r0
 8003dde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003de2:	ec43 2b10 	vmov	d0, r2, r3
 8003de6:	4770      	bx	lr

08003de8 <__kernel_rem_pio2>:
 8003de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dec:	ed2d 8b02 	vpush	{d8}
 8003df0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003df4:	f112 0f14 	cmn.w	r2, #20
 8003df8:	9306      	str	r3, [sp, #24]
 8003dfa:	9104      	str	r1, [sp, #16]
 8003dfc:	4bbe      	ldr	r3, [pc, #760]	@ (80040f8 <__kernel_rem_pio2+0x310>)
 8003dfe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003e00:	9008      	str	r0, [sp, #32]
 8003e02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	9b06      	ldr	r3, [sp, #24]
 8003e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e0e:	bfa8      	it	ge
 8003e10:	1ed4      	subge	r4, r2, #3
 8003e12:	9305      	str	r3, [sp, #20]
 8003e14:	bfb2      	itee	lt
 8003e16:	2400      	movlt	r4, #0
 8003e18:	2318      	movge	r3, #24
 8003e1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8003e1e:	f06f 0317 	mvn.w	r3, #23
 8003e22:	fb04 3303 	mla	r3, r4, r3, r3
 8003e26:	eb03 0b02 	add.w	fp, r3, r2
 8003e2a:	9b00      	ldr	r3, [sp, #0]
 8003e2c:	9a05      	ldr	r2, [sp, #20]
 8003e2e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80040e8 <__kernel_rem_pio2+0x300>
 8003e32:	eb03 0802 	add.w	r8, r3, r2
 8003e36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003e38:	1aa7      	subs	r7, r4, r2
 8003e3a:	ae20      	add	r6, sp, #128	@ 0x80
 8003e3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8003e40:	2500      	movs	r5, #0
 8003e42:	4545      	cmp	r5, r8
 8003e44:	dd13      	ble.n	8003e6e <__kernel_rem_pio2+0x86>
 8003e46:	9b06      	ldr	r3, [sp, #24]
 8003e48:	aa20      	add	r2, sp, #128	@ 0x80
 8003e4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8003e4e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8003e52:	f04f 0800 	mov.w	r8, #0
 8003e56:	9b00      	ldr	r3, [sp, #0]
 8003e58:	4598      	cmp	r8, r3
 8003e5a:	dc31      	bgt.n	8003ec0 <__kernel_rem_pio2+0xd8>
 8003e5c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80040e8 <__kernel_rem_pio2+0x300>
 8003e60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003e68:	462f      	mov	r7, r5
 8003e6a:	2600      	movs	r6, #0
 8003e6c:	e01b      	b.n	8003ea6 <__kernel_rem_pio2+0xbe>
 8003e6e:	42ef      	cmn	r7, r5
 8003e70:	d407      	bmi.n	8003e82 <__kernel_rem_pio2+0x9a>
 8003e72:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003e76:	f7fc faf9 	bl	800046c <__aeabi_i2d>
 8003e7a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003e7e:	3501      	adds	r5, #1
 8003e80:	e7df      	b.n	8003e42 <__kernel_rem_pio2+0x5a>
 8003e82:	ec51 0b18 	vmov	r0, r1, d8
 8003e86:	e7f8      	b.n	8003e7a <__kernel_rem_pio2+0x92>
 8003e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e8c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003e90:	f7fc fb56 	bl	8000540 <__aeabi_dmul>
 8003e94:	4602      	mov	r2, r0
 8003e96:	460b      	mov	r3, r1
 8003e98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e9c:	f7fc f99a 	bl	80001d4 <__adddf3>
 8003ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ea4:	3601      	adds	r6, #1
 8003ea6:	9b05      	ldr	r3, [sp, #20]
 8003ea8:	429e      	cmp	r6, r3
 8003eaa:	f1a7 0708 	sub.w	r7, r7, #8
 8003eae:	ddeb      	ble.n	8003e88 <__kernel_rem_pio2+0xa0>
 8003eb0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003eb4:	f108 0801 	add.w	r8, r8, #1
 8003eb8:	ecaa 7b02 	vstmia	sl!, {d7}
 8003ebc:	3508      	adds	r5, #8
 8003ebe:	e7ca      	b.n	8003e56 <__kernel_rem_pio2+0x6e>
 8003ec0:	9b00      	ldr	r3, [sp, #0]
 8003ec2:	f8dd 8000 	ldr.w	r8, [sp]
 8003ec6:	aa0c      	add	r2, sp, #48	@ 0x30
 8003ec8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ece:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8003ed0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ed4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ed6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003eda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003edc:	ab98      	add	r3, sp, #608	@ 0x260
 8003ede:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003ee2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8003ee6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003eea:	ac0c      	add	r4, sp, #48	@ 0x30
 8003eec:	ab70      	add	r3, sp, #448	@ 0x1c0
 8003eee:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8003ef2:	46a1      	mov	r9, r4
 8003ef4:	46c2      	mov	sl, r8
 8003ef6:	f1ba 0f00 	cmp.w	sl, #0
 8003efa:	f1a5 0508 	sub.w	r5, r5, #8
 8003efe:	dc77      	bgt.n	8003ff0 <__kernel_rem_pio2+0x208>
 8003f00:	4658      	mov	r0, fp
 8003f02:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003f06:	f000 fac7 	bl	8004498 <scalbn>
 8003f0a:	ec57 6b10 	vmov	r6, r7, d0
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8003f14:	4630      	mov	r0, r6
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc fb12 	bl	8000540 <__aeabi_dmul>
 8003f1c:	ec41 0b10 	vmov	d0, r0, r1
 8003f20:	f000 fb3a 	bl	8004598 <floor>
 8003f24:	4b75      	ldr	r3, [pc, #468]	@ (80040fc <__kernel_rem_pio2+0x314>)
 8003f26:	ec51 0b10 	vmov	r0, r1, d0
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f7fc fb08 	bl	8000540 <__aeabi_dmul>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4630      	mov	r0, r6
 8003f36:	4639      	mov	r1, r7
 8003f38:	f7fc f94a 	bl	80001d0 <__aeabi_dsub>
 8003f3c:	460f      	mov	r7, r1
 8003f3e:	4606      	mov	r6, r0
 8003f40:	f7fc fd98 	bl	8000a74 <__aeabi_d2iz>
 8003f44:	9002      	str	r0, [sp, #8]
 8003f46:	f7fc fa91 	bl	800046c <__aeabi_i2d>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4630      	mov	r0, r6
 8003f50:	4639      	mov	r1, r7
 8003f52:	f7fc f93d 	bl	80001d0 <__aeabi_dsub>
 8003f56:	f1bb 0f00 	cmp.w	fp, #0
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	460f      	mov	r7, r1
 8003f5e:	dd6c      	ble.n	800403a <__kernel_rem_pio2+0x252>
 8003f60:	f108 31ff 	add.w	r1, r8, #4294967295
 8003f64:	ab0c      	add	r3, sp, #48	@ 0x30
 8003f66:	9d02      	ldr	r5, [sp, #8]
 8003f68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003f6c:	f1cb 0018 	rsb	r0, fp, #24
 8003f70:	fa43 f200 	asr.w	r2, r3, r0
 8003f74:	4415      	add	r5, r2
 8003f76:	4082      	lsls	r2, r0
 8003f78:	1a9b      	subs	r3, r3, r2
 8003f7a:	aa0c      	add	r2, sp, #48	@ 0x30
 8003f7c:	9502      	str	r5, [sp, #8]
 8003f7e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003f82:	f1cb 0217 	rsb	r2, fp, #23
 8003f86:	fa43 f902 	asr.w	r9, r3, r2
 8003f8a:	f1b9 0f00 	cmp.w	r9, #0
 8003f8e:	dd64      	ble.n	800405a <__kernel_rem_pio2+0x272>
 8003f90:	9b02      	ldr	r3, [sp, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	3301      	adds	r3, #1
 8003f96:	9302      	str	r3, [sp, #8]
 8003f98:	4615      	mov	r5, r2
 8003f9a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8003f9e:	4590      	cmp	r8, r2
 8003fa0:	f300 80b8 	bgt.w	8004114 <__kernel_rem_pio2+0x32c>
 8003fa4:	f1bb 0f00 	cmp.w	fp, #0
 8003fa8:	dd07      	ble.n	8003fba <__kernel_rem_pio2+0x1d2>
 8003faa:	f1bb 0f01 	cmp.w	fp, #1
 8003fae:	f000 80bf 	beq.w	8004130 <__kernel_rem_pio2+0x348>
 8003fb2:	f1bb 0f02 	cmp.w	fp, #2
 8003fb6:	f000 80c6 	beq.w	8004146 <__kernel_rem_pio2+0x35e>
 8003fba:	f1b9 0f02 	cmp.w	r9, #2
 8003fbe:	d14c      	bne.n	800405a <__kernel_rem_pio2+0x272>
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	463b      	mov	r3, r7
 8003fc4:	494e      	ldr	r1, [pc, #312]	@ (8004100 <__kernel_rem_pio2+0x318>)
 8003fc6:	2000      	movs	r0, #0
 8003fc8:	f7fc f902 	bl	80001d0 <__aeabi_dsub>
 8003fcc:	4606      	mov	r6, r0
 8003fce:	460f      	mov	r7, r1
 8003fd0:	2d00      	cmp	r5, #0
 8003fd2:	d042      	beq.n	800405a <__kernel_rem_pio2+0x272>
 8003fd4:	4658      	mov	r0, fp
 8003fd6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80040f0 <__kernel_rem_pio2+0x308>
 8003fda:	f000 fa5d 	bl	8004498 <scalbn>
 8003fde:	4630      	mov	r0, r6
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	ec53 2b10 	vmov	r2, r3, d0
 8003fe6:	f7fc f8f3 	bl	80001d0 <__aeabi_dsub>
 8003fea:	4606      	mov	r6, r0
 8003fec:	460f      	mov	r7, r1
 8003fee:	e034      	b.n	800405a <__kernel_rem_pio2+0x272>
 8003ff0:	4b44      	ldr	r3, [pc, #272]	@ (8004104 <__kernel_rem_pio2+0x31c>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ff8:	f7fc faa2 	bl	8000540 <__aeabi_dmul>
 8003ffc:	f7fc fd3a 	bl	8000a74 <__aeabi_d2iz>
 8004000:	f7fc fa34 	bl	800046c <__aeabi_i2d>
 8004004:	4b40      	ldr	r3, [pc, #256]	@ (8004108 <__kernel_rem_pio2+0x320>)
 8004006:	2200      	movs	r2, #0
 8004008:	4606      	mov	r6, r0
 800400a:	460f      	mov	r7, r1
 800400c:	f7fc fa98 	bl	8000540 <__aeabi_dmul>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004018:	f7fc f8da 	bl	80001d0 <__aeabi_dsub>
 800401c:	f7fc fd2a 	bl	8000a74 <__aeabi_d2iz>
 8004020:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004024:	f849 0b04 	str.w	r0, [r9], #4
 8004028:	4639      	mov	r1, r7
 800402a:	4630      	mov	r0, r6
 800402c:	f7fc f8d2 	bl	80001d4 <__adddf3>
 8004030:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004034:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004038:	e75d      	b.n	8003ef6 <__kernel_rem_pio2+0x10e>
 800403a:	d107      	bne.n	800404c <__kernel_rem_pio2+0x264>
 800403c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004040:	aa0c      	add	r2, sp, #48	@ 0x30
 8004042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004046:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800404a:	e79e      	b.n	8003f8a <__kernel_rem_pio2+0x1a2>
 800404c:	4b2f      	ldr	r3, [pc, #188]	@ (800410c <__kernel_rem_pio2+0x324>)
 800404e:	2200      	movs	r2, #0
 8004050:	f7fc fcfc 	bl	8000a4c <__aeabi_dcmpge>
 8004054:	2800      	cmp	r0, #0
 8004056:	d143      	bne.n	80040e0 <__kernel_rem_pio2+0x2f8>
 8004058:	4681      	mov	r9, r0
 800405a:	2200      	movs	r2, #0
 800405c:	2300      	movs	r3, #0
 800405e:	4630      	mov	r0, r6
 8004060:	4639      	mov	r1, r7
 8004062:	f7fc fcd5 	bl	8000a10 <__aeabi_dcmpeq>
 8004066:	2800      	cmp	r0, #0
 8004068:	f000 80bf 	beq.w	80041ea <__kernel_rem_pio2+0x402>
 800406c:	f108 33ff 	add.w	r3, r8, #4294967295
 8004070:	2200      	movs	r2, #0
 8004072:	9900      	ldr	r1, [sp, #0]
 8004074:	428b      	cmp	r3, r1
 8004076:	da6e      	bge.n	8004156 <__kernel_rem_pio2+0x36e>
 8004078:	2a00      	cmp	r2, #0
 800407a:	f000 8089 	beq.w	8004190 <__kernel_rem_pio2+0x3a8>
 800407e:	f108 38ff 	add.w	r8, r8, #4294967295
 8004082:	ab0c      	add	r3, sp, #48	@ 0x30
 8004084:	f1ab 0b18 	sub.w	fp, fp, #24
 8004088:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0f6      	beq.n	800407e <__kernel_rem_pio2+0x296>
 8004090:	4658      	mov	r0, fp
 8004092:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80040f0 <__kernel_rem_pio2+0x308>
 8004096:	f000 f9ff 	bl	8004498 <scalbn>
 800409a:	f108 0301 	add.w	r3, r8, #1
 800409e:	00da      	lsls	r2, r3, #3
 80040a0:	9205      	str	r2, [sp, #20]
 80040a2:	ec55 4b10 	vmov	r4, r5, d0
 80040a6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80040a8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8004104 <__kernel_rem_pio2+0x31c>
 80040ac:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80040b0:	4646      	mov	r6, r8
 80040b2:	f04f 0a00 	mov.w	sl, #0
 80040b6:	2e00      	cmp	r6, #0
 80040b8:	f280 80cf 	bge.w	800425a <__kernel_rem_pio2+0x472>
 80040bc:	4644      	mov	r4, r8
 80040be:	2c00      	cmp	r4, #0
 80040c0:	f2c0 80fd 	blt.w	80042be <__kernel_rem_pio2+0x4d6>
 80040c4:	4b12      	ldr	r3, [pc, #72]	@ (8004110 <__kernel_rem_pio2+0x328>)
 80040c6:	461f      	mov	r7, r3
 80040c8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80040ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040ce:	9306      	str	r3, [sp, #24]
 80040d0:	f04f 0a00 	mov.w	sl, #0
 80040d4:	f04f 0b00 	mov.w	fp, #0
 80040d8:	2600      	movs	r6, #0
 80040da:	eba8 0504 	sub.w	r5, r8, r4
 80040de:	e0e2      	b.n	80042a6 <__kernel_rem_pio2+0x4be>
 80040e0:	f04f 0902 	mov.w	r9, #2
 80040e4:	e754      	b.n	8003f90 <__kernel_rem_pio2+0x1a8>
 80040e6:	bf00      	nop
	...
 80040f4:	3ff00000 	.word	0x3ff00000
 80040f8:	080048e0 	.word	0x080048e0
 80040fc:	40200000 	.word	0x40200000
 8004100:	3ff00000 	.word	0x3ff00000
 8004104:	3e700000 	.word	0x3e700000
 8004108:	41700000 	.word	0x41700000
 800410c:	3fe00000 	.word	0x3fe00000
 8004110:	080048a0 	.word	0x080048a0
 8004114:	f854 3b04 	ldr.w	r3, [r4], #4
 8004118:	b945      	cbnz	r5, 800412c <__kernel_rem_pio2+0x344>
 800411a:	b123      	cbz	r3, 8004126 <__kernel_rem_pio2+0x33e>
 800411c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8004120:	f844 3c04 	str.w	r3, [r4, #-4]
 8004124:	2301      	movs	r3, #1
 8004126:	3201      	adds	r2, #1
 8004128:	461d      	mov	r5, r3
 800412a:	e738      	b.n	8003f9e <__kernel_rem_pio2+0x1b6>
 800412c:	1acb      	subs	r3, r1, r3
 800412e:	e7f7      	b.n	8004120 <__kernel_rem_pio2+0x338>
 8004130:	f108 32ff 	add.w	r2, r8, #4294967295
 8004134:	ab0c      	add	r3, sp, #48	@ 0x30
 8004136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800413a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800413e:	a90c      	add	r1, sp, #48	@ 0x30
 8004140:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004144:	e739      	b.n	8003fba <__kernel_rem_pio2+0x1d2>
 8004146:	f108 32ff 	add.w	r2, r8, #4294967295
 800414a:	ab0c      	add	r3, sp, #48	@ 0x30
 800414c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004150:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004154:	e7f3      	b.n	800413e <__kernel_rem_pio2+0x356>
 8004156:	a90c      	add	r1, sp, #48	@ 0x30
 8004158:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800415c:	3b01      	subs	r3, #1
 800415e:	430a      	orrs	r2, r1
 8004160:	e787      	b.n	8004072 <__kernel_rem_pio2+0x28a>
 8004162:	3401      	adds	r4, #1
 8004164:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004168:	2a00      	cmp	r2, #0
 800416a:	d0fa      	beq.n	8004162 <__kernel_rem_pio2+0x37a>
 800416c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800416e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004172:	eb0d 0503 	add.w	r5, sp, r3
 8004176:	9b06      	ldr	r3, [sp, #24]
 8004178:	aa20      	add	r2, sp, #128	@ 0x80
 800417a:	4443      	add	r3, r8
 800417c:	f108 0701 	add.w	r7, r8, #1
 8004180:	3d98      	subs	r5, #152	@ 0x98
 8004182:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8004186:	4444      	add	r4, r8
 8004188:	42bc      	cmp	r4, r7
 800418a:	da04      	bge.n	8004196 <__kernel_rem_pio2+0x3ae>
 800418c:	46a0      	mov	r8, r4
 800418e:	e6a2      	b.n	8003ed6 <__kernel_rem_pio2+0xee>
 8004190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004192:	2401      	movs	r4, #1
 8004194:	e7e6      	b.n	8004164 <__kernel_rem_pio2+0x37c>
 8004196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004198:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800419c:	f7fc f966 	bl	800046c <__aeabi_i2d>
 80041a0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004468 <__kernel_rem_pio2+0x680>
 80041a4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80041a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80041ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041b0:	46b2      	mov	sl, r6
 80041b2:	f04f 0800 	mov.w	r8, #0
 80041b6:	9b05      	ldr	r3, [sp, #20]
 80041b8:	4598      	cmp	r8, r3
 80041ba:	dd05      	ble.n	80041c8 <__kernel_rem_pio2+0x3e0>
 80041bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041c0:	3701      	adds	r7, #1
 80041c2:	eca5 7b02 	vstmia	r5!, {d7}
 80041c6:	e7df      	b.n	8004188 <__kernel_rem_pio2+0x3a0>
 80041c8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80041cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80041d0:	f7fc f9b6 	bl	8000540 <__aeabi_dmul>
 80041d4:	4602      	mov	r2, r0
 80041d6:	460b      	mov	r3, r1
 80041d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041dc:	f7fb fffa 	bl	80001d4 <__adddf3>
 80041e0:	f108 0801 	add.w	r8, r8, #1
 80041e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80041e8:	e7e5      	b.n	80041b6 <__kernel_rem_pio2+0x3ce>
 80041ea:	f1cb 0000 	rsb	r0, fp, #0
 80041ee:	ec47 6b10 	vmov	d0, r6, r7
 80041f2:	f000 f951 	bl	8004498 <scalbn>
 80041f6:	ec55 4b10 	vmov	r4, r5, d0
 80041fa:	4b9d      	ldr	r3, [pc, #628]	@ (8004470 <__kernel_rem_pio2+0x688>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	4620      	mov	r0, r4
 8004200:	4629      	mov	r1, r5
 8004202:	f7fc fc23 	bl	8000a4c <__aeabi_dcmpge>
 8004206:	b300      	cbz	r0, 800424a <__kernel_rem_pio2+0x462>
 8004208:	4b9a      	ldr	r3, [pc, #616]	@ (8004474 <__kernel_rem_pio2+0x68c>)
 800420a:	2200      	movs	r2, #0
 800420c:	4620      	mov	r0, r4
 800420e:	4629      	mov	r1, r5
 8004210:	f7fc f996 	bl	8000540 <__aeabi_dmul>
 8004214:	f7fc fc2e 	bl	8000a74 <__aeabi_d2iz>
 8004218:	4606      	mov	r6, r0
 800421a:	f7fc f927 	bl	800046c <__aeabi_i2d>
 800421e:	4b94      	ldr	r3, [pc, #592]	@ (8004470 <__kernel_rem_pio2+0x688>)
 8004220:	2200      	movs	r2, #0
 8004222:	f7fc f98d 	bl	8000540 <__aeabi_dmul>
 8004226:	460b      	mov	r3, r1
 8004228:	4602      	mov	r2, r0
 800422a:	4629      	mov	r1, r5
 800422c:	4620      	mov	r0, r4
 800422e:	f7fb ffcf 	bl	80001d0 <__aeabi_dsub>
 8004232:	f7fc fc1f 	bl	8000a74 <__aeabi_d2iz>
 8004236:	ab0c      	add	r3, sp, #48	@ 0x30
 8004238:	f10b 0b18 	add.w	fp, fp, #24
 800423c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004240:	f108 0801 	add.w	r8, r8, #1
 8004244:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004248:	e722      	b.n	8004090 <__kernel_rem_pio2+0x2a8>
 800424a:	4620      	mov	r0, r4
 800424c:	4629      	mov	r1, r5
 800424e:	f7fc fc11 	bl	8000a74 <__aeabi_d2iz>
 8004252:	ab0c      	add	r3, sp, #48	@ 0x30
 8004254:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004258:	e71a      	b.n	8004090 <__kernel_rem_pio2+0x2a8>
 800425a:	ab0c      	add	r3, sp, #48	@ 0x30
 800425c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004260:	f7fc f904 	bl	800046c <__aeabi_i2d>
 8004264:	4622      	mov	r2, r4
 8004266:	462b      	mov	r3, r5
 8004268:	f7fc f96a 	bl	8000540 <__aeabi_dmul>
 800426c:	4652      	mov	r2, sl
 800426e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8004272:	465b      	mov	r3, fp
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fc f962 	bl	8000540 <__aeabi_dmul>
 800427c:	3e01      	subs	r6, #1
 800427e:	4604      	mov	r4, r0
 8004280:	460d      	mov	r5, r1
 8004282:	e718      	b.n	80040b6 <__kernel_rem_pio2+0x2ce>
 8004284:	9906      	ldr	r1, [sp, #24]
 8004286:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800428a:	9106      	str	r1, [sp, #24]
 800428c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004290:	f7fc f956 	bl	8000540 <__aeabi_dmul>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4650      	mov	r0, sl
 800429a:	4659      	mov	r1, fp
 800429c:	f7fb ff9a 	bl	80001d4 <__adddf3>
 80042a0:	3601      	adds	r6, #1
 80042a2:	4682      	mov	sl, r0
 80042a4:	468b      	mov	fp, r1
 80042a6:	9b00      	ldr	r3, [sp, #0]
 80042a8:	429e      	cmp	r6, r3
 80042aa:	dc01      	bgt.n	80042b0 <__kernel_rem_pio2+0x4c8>
 80042ac:	42b5      	cmp	r5, r6
 80042ae:	dae9      	bge.n	8004284 <__kernel_rem_pio2+0x49c>
 80042b0:	ab48      	add	r3, sp, #288	@ 0x120
 80042b2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80042b6:	e9c5 ab00 	strd	sl, fp, [r5]
 80042ba:	3c01      	subs	r4, #1
 80042bc:	e6ff      	b.n	80040be <__kernel_rem_pio2+0x2d6>
 80042be:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	dc0b      	bgt.n	80042dc <__kernel_rem_pio2+0x4f4>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	dc39      	bgt.n	800433c <__kernel_rem_pio2+0x554>
 80042c8:	d05d      	beq.n	8004386 <__kernel_rem_pio2+0x59e>
 80042ca:	9b02      	ldr	r3, [sp, #8]
 80042cc:	f003 0007 	and.w	r0, r3, #7
 80042d0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80042d4:	ecbd 8b02 	vpop	{d8}
 80042d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042dc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d1f3      	bne.n	80042ca <__kernel_rem_pio2+0x4e2>
 80042e2:	9b05      	ldr	r3, [sp, #20]
 80042e4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042e8:	eb0d 0403 	add.w	r4, sp, r3
 80042ec:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80042f0:	4625      	mov	r5, r4
 80042f2:	46c2      	mov	sl, r8
 80042f4:	f1ba 0f00 	cmp.w	sl, #0
 80042f8:	f1a5 0508 	sub.w	r5, r5, #8
 80042fc:	dc6b      	bgt.n	80043d6 <__kernel_rem_pio2+0x5ee>
 80042fe:	4645      	mov	r5, r8
 8004300:	2d01      	cmp	r5, #1
 8004302:	f1a4 0408 	sub.w	r4, r4, #8
 8004306:	f300 8087 	bgt.w	8004418 <__kernel_rem_pio2+0x630>
 800430a:	9c05      	ldr	r4, [sp, #20]
 800430c:	ab48      	add	r3, sp, #288	@ 0x120
 800430e:	441c      	add	r4, r3
 8004310:	2000      	movs	r0, #0
 8004312:	2100      	movs	r1, #0
 8004314:	f1b8 0f01 	cmp.w	r8, #1
 8004318:	f300 809c 	bgt.w	8004454 <__kernel_rem_pio2+0x66c>
 800431c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004320:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004324:	f1b9 0f00 	cmp.w	r9, #0
 8004328:	f040 80a6 	bne.w	8004478 <__kernel_rem_pio2+0x690>
 800432c:	9b04      	ldr	r3, [sp, #16]
 800432e:	e9c3 7800 	strd	r7, r8, [r3]
 8004332:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004336:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800433a:	e7c6      	b.n	80042ca <__kernel_rem_pio2+0x4e2>
 800433c:	9d05      	ldr	r5, [sp, #20]
 800433e:	ab48      	add	r3, sp, #288	@ 0x120
 8004340:	441d      	add	r5, r3
 8004342:	4644      	mov	r4, r8
 8004344:	2000      	movs	r0, #0
 8004346:	2100      	movs	r1, #0
 8004348:	2c00      	cmp	r4, #0
 800434a:	da35      	bge.n	80043b8 <__kernel_rem_pio2+0x5d0>
 800434c:	f1b9 0f00 	cmp.w	r9, #0
 8004350:	d038      	beq.n	80043c4 <__kernel_rem_pio2+0x5dc>
 8004352:	4602      	mov	r2, r0
 8004354:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004358:	9c04      	ldr	r4, [sp, #16]
 800435a:	e9c4 2300 	strd	r2, r3, [r4]
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004366:	f7fb ff33 	bl	80001d0 <__aeabi_dsub>
 800436a:	ad4a      	add	r5, sp, #296	@ 0x128
 800436c:	2401      	movs	r4, #1
 800436e:	45a0      	cmp	r8, r4
 8004370:	da2b      	bge.n	80043ca <__kernel_rem_pio2+0x5e2>
 8004372:	f1b9 0f00 	cmp.w	r9, #0
 8004376:	d002      	beq.n	800437e <__kernel_rem_pio2+0x596>
 8004378:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800437c:	4619      	mov	r1, r3
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004384:	e7a1      	b.n	80042ca <__kernel_rem_pio2+0x4e2>
 8004386:	9c05      	ldr	r4, [sp, #20]
 8004388:	ab48      	add	r3, sp, #288	@ 0x120
 800438a:	441c      	add	r4, r3
 800438c:	2000      	movs	r0, #0
 800438e:	2100      	movs	r1, #0
 8004390:	f1b8 0f00 	cmp.w	r8, #0
 8004394:	da09      	bge.n	80043aa <__kernel_rem_pio2+0x5c2>
 8004396:	f1b9 0f00 	cmp.w	r9, #0
 800439a:	d002      	beq.n	80043a2 <__kernel_rem_pio2+0x5ba>
 800439c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80043a0:	4619      	mov	r1, r3
 80043a2:	9b04      	ldr	r3, [sp, #16]
 80043a4:	e9c3 0100 	strd	r0, r1, [r3]
 80043a8:	e78f      	b.n	80042ca <__kernel_rem_pio2+0x4e2>
 80043aa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80043ae:	f7fb ff11 	bl	80001d4 <__adddf3>
 80043b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80043b6:	e7eb      	b.n	8004390 <__kernel_rem_pio2+0x5a8>
 80043b8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80043bc:	f7fb ff0a 	bl	80001d4 <__adddf3>
 80043c0:	3c01      	subs	r4, #1
 80043c2:	e7c1      	b.n	8004348 <__kernel_rem_pio2+0x560>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	e7c6      	b.n	8004358 <__kernel_rem_pio2+0x570>
 80043ca:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80043ce:	f7fb ff01 	bl	80001d4 <__adddf3>
 80043d2:	3401      	adds	r4, #1
 80043d4:	e7cb      	b.n	800436e <__kernel_rem_pio2+0x586>
 80043d6:	ed95 7b00 	vldr	d7, [r5]
 80043da:	ed8d 7b00 	vstr	d7, [sp]
 80043de:	ed95 7b02 	vldr	d7, [r5, #8]
 80043e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043e6:	ec53 2b17 	vmov	r2, r3, d7
 80043ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80043ee:	f7fb fef1 	bl	80001d4 <__adddf3>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	4606      	mov	r6, r0
 80043f8:	460f      	mov	r7, r1
 80043fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043fe:	f7fb fee7 	bl	80001d0 <__aeabi_dsub>
 8004402:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004406:	f7fb fee5 	bl	80001d4 <__adddf3>
 800440a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800440e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8004412:	e9c5 6700 	strd	r6, r7, [r5]
 8004416:	e76d      	b.n	80042f4 <__kernel_rem_pio2+0x50c>
 8004418:	ed94 7b00 	vldr	d7, [r4]
 800441c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8004420:	ec51 0b17 	vmov	r0, r1, d7
 8004424:	4652      	mov	r2, sl
 8004426:	465b      	mov	r3, fp
 8004428:	ed8d 7b00 	vstr	d7, [sp]
 800442c:	f7fb fed2 	bl	80001d4 <__adddf3>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4606      	mov	r6, r0
 8004436:	460f      	mov	r7, r1
 8004438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800443c:	f7fb fec8 	bl	80001d0 <__aeabi_dsub>
 8004440:	4652      	mov	r2, sl
 8004442:	465b      	mov	r3, fp
 8004444:	f7fb fec6 	bl	80001d4 <__adddf3>
 8004448:	3d01      	subs	r5, #1
 800444a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800444e:	e9c4 6700 	strd	r6, r7, [r4]
 8004452:	e755      	b.n	8004300 <__kernel_rem_pio2+0x518>
 8004454:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004458:	f7fb febc 	bl	80001d4 <__adddf3>
 800445c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004460:	e758      	b.n	8004314 <__kernel_rem_pio2+0x52c>
 8004462:	bf00      	nop
 8004464:	f3af 8000 	nop.w
	...
 8004470:	41700000 	.word	0x41700000
 8004474:	3e700000 	.word	0x3e700000
 8004478:	9b04      	ldr	r3, [sp, #16]
 800447a:	9a04      	ldr	r2, [sp, #16]
 800447c:	601f      	str	r7, [r3, #0]
 800447e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004482:	605c      	str	r4, [r3, #4]
 8004484:	609d      	str	r5, [r3, #8]
 8004486:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800448a:	60d3      	str	r3, [r2, #12]
 800448c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004490:	6110      	str	r0, [r2, #16]
 8004492:	6153      	str	r3, [r2, #20]
 8004494:	e719      	b.n	80042ca <__kernel_rem_pio2+0x4e2>
 8004496:	bf00      	nop

08004498 <scalbn>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	ec55 4b10 	vmov	r4, r5, d0
 800449e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80044a2:	4606      	mov	r6, r0
 80044a4:	462b      	mov	r3, r5
 80044a6:	b991      	cbnz	r1, 80044ce <scalbn+0x36>
 80044a8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80044ac:	4323      	orrs	r3, r4
 80044ae:	d03d      	beq.n	800452c <scalbn+0x94>
 80044b0:	4b35      	ldr	r3, [pc, #212]	@ (8004588 <scalbn+0xf0>)
 80044b2:	4620      	mov	r0, r4
 80044b4:	4629      	mov	r1, r5
 80044b6:	2200      	movs	r2, #0
 80044b8:	f7fc f842 	bl	8000540 <__aeabi_dmul>
 80044bc:	4b33      	ldr	r3, [pc, #204]	@ (800458c <scalbn+0xf4>)
 80044be:	429e      	cmp	r6, r3
 80044c0:	4604      	mov	r4, r0
 80044c2:	460d      	mov	r5, r1
 80044c4:	da0f      	bge.n	80044e6 <scalbn+0x4e>
 80044c6:	a328      	add	r3, pc, #160	@ (adr r3, 8004568 <scalbn+0xd0>)
 80044c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044cc:	e01e      	b.n	800450c <scalbn+0x74>
 80044ce:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80044d2:	4291      	cmp	r1, r2
 80044d4:	d10b      	bne.n	80044ee <scalbn+0x56>
 80044d6:	4622      	mov	r2, r4
 80044d8:	4620      	mov	r0, r4
 80044da:	4629      	mov	r1, r5
 80044dc:	f7fb fe7a 	bl	80001d4 <__adddf3>
 80044e0:	4604      	mov	r4, r0
 80044e2:	460d      	mov	r5, r1
 80044e4:	e022      	b.n	800452c <scalbn+0x94>
 80044e6:	460b      	mov	r3, r1
 80044e8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80044ec:	3936      	subs	r1, #54	@ 0x36
 80044ee:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80044f2:	4296      	cmp	r6, r2
 80044f4:	dd0d      	ble.n	8004512 <scalbn+0x7a>
 80044f6:	2d00      	cmp	r5, #0
 80044f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004570 <scalbn+0xd8>)
 80044fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80044fe:	da02      	bge.n	8004506 <scalbn+0x6e>
 8004500:	a11d      	add	r1, pc, #116	@ (adr r1, 8004578 <scalbn+0xe0>)
 8004502:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004506:	a31a      	add	r3, pc, #104	@ (adr r3, 8004570 <scalbn+0xd8>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fc f818 	bl	8000540 <__aeabi_dmul>
 8004510:	e7e6      	b.n	80044e0 <scalbn+0x48>
 8004512:	1872      	adds	r2, r6, r1
 8004514:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004518:	428a      	cmp	r2, r1
 800451a:	dcec      	bgt.n	80044f6 <scalbn+0x5e>
 800451c:	2a00      	cmp	r2, #0
 800451e:	dd08      	ble.n	8004532 <scalbn+0x9a>
 8004520:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004524:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004528:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800452c:	ec45 4b10 	vmov	d0, r4, r5
 8004530:	bd70      	pop	{r4, r5, r6, pc}
 8004532:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004536:	da08      	bge.n	800454a <scalbn+0xb2>
 8004538:	2d00      	cmp	r5, #0
 800453a:	a10b      	add	r1, pc, #44	@ (adr r1, 8004568 <scalbn+0xd0>)
 800453c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004540:	dac1      	bge.n	80044c6 <scalbn+0x2e>
 8004542:	a10f      	add	r1, pc, #60	@ (adr r1, 8004580 <scalbn+0xe8>)
 8004544:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004548:	e7bd      	b.n	80044c6 <scalbn+0x2e>
 800454a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800454e:	3236      	adds	r2, #54	@ 0x36
 8004550:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004554:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004558:	4620      	mov	r0, r4
 800455a:	4b0d      	ldr	r3, [pc, #52]	@ (8004590 <scalbn+0xf8>)
 800455c:	4629      	mov	r1, r5
 800455e:	2200      	movs	r2, #0
 8004560:	e7d4      	b.n	800450c <scalbn+0x74>
 8004562:	bf00      	nop
 8004564:	f3af 8000 	nop.w
 8004568:	c2f8f359 	.word	0xc2f8f359
 800456c:	01a56e1f 	.word	0x01a56e1f
 8004570:	8800759c 	.word	0x8800759c
 8004574:	7e37e43c 	.word	0x7e37e43c
 8004578:	8800759c 	.word	0x8800759c
 800457c:	fe37e43c 	.word	0xfe37e43c
 8004580:	c2f8f359 	.word	0xc2f8f359
 8004584:	81a56e1f 	.word	0x81a56e1f
 8004588:	43500000 	.word	0x43500000
 800458c:	ffff3cb0 	.word	0xffff3cb0
 8004590:	3c900000 	.word	0x3c900000
 8004594:	00000000 	.word	0x00000000

08004598 <floor>:
 8004598:	ec51 0b10 	vmov	r0, r1, d0
 800459c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045a4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80045a8:	2e13      	cmp	r6, #19
 80045aa:	460c      	mov	r4, r1
 80045ac:	4605      	mov	r5, r0
 80045ae:	4680      	mov	r8, r0
 80045b0:	dc34      	bgt.n	800461c <floor+0x84>
 80045b2:	2e00      	cmp	r6, #0
 80045b4:	da17      	bge.n	80045e6 <floor+0x4e>
 80045b6:	a332      	add	r3, pc, #200	@ (adr r3, 8004680 <floor+0xe8>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f7fb fe0a 	bl	80001d4 <__adddf3>
 80045c0:	2200      	movs	r2, #0
 80045c2:	2300      	movs	r3, #0
 80045c4:	f7fc fa4c 	bl	8000a60 <__aeabi_dcmpgt>
 80045c8:	b150      	cbz	r0, 80045e0 <floor+0x48>
 80045ca:	2c00      	cmp	r4, #0
 80045cc:	da55      	bge.n	800467a <floor+0xe2>
 80045ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80045d2:	432c      	orrs	r4, r5
 80045d4:	2500      	movs	r5, #0
 80045d6:	42ac      	cmp	r4, r5
 80045d8:	4c2b      	ldr	r4, [pc, #172]	@ (8004688 <floor+0xf0>)
 80045da:	bf08      	it	eq
 80045dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80045e0:	4621      	mov	r1, r4
 80045e2:	4628      	mov	r0, r5
 80045e4:	e023      	b.n	800462e <floor+0x96>
 80045e6:	4f29      	ldr	r7, [pc, #164]	@ (800468c <floor+0xf4>)
 80045e8:	4137      	asrs	r7, r6
 80045ea:	ea01 0307 	and.w	r3, r1, r7
 80045ee:	4303      	orrs	r3, r0
 80045f0:	d01d      	beq.n	800462e <floor+0x96>
 80045f2:	a323      	add	r3, pc, #140	@ (adr r3, 8004680 <floor+0xe8>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fdec 	bl	80001d4 <__adddf3>
 80045fc:	2200      	movs	r2, #0
 80045fe:	2300      	movs	r3, #0
 8004600:	f7fc fa2e 	bl	8000a60 <__aeabi_dcmpgt>
 8004604:	2800      	cmp	r0, #0
 8004606:	d0eb      	beq.n	80045e0 <floor+0x48>
 8004608:	2c00      	cmp	r4, #0
 800460a:	bfbe      	ittt	lt
 800460c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004610:	4133      	asrlt	r3, r6
 8004612:	18e4      	addlt	r4, r4, r3
 8004614:	ea24 0407 	bic.w	r4, r4, r7
 8004618:	2500      	movs	r5, #0
 800461a:	e7e1      	b.n	80045e0 <floor+0x48>
 800461c:	2e33      	cmp	r6, #51	@ 0x33
 800461e:	dd0a      	ble.n	8004636 <floor+0x9e>
 8004620:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004624:	d103      	bne.n	800462e <floor+0x96>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	f7fb fdd3 	bl	80001d4 <__adddf3>
 800462e:	ec41 0b10 	vmov	d0, r0, r1
 8004632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004636:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800463a:	f04f 37ff 	mov.w	r7, #4294967295
 800463e:	40df      	lsrs	r7, r3
 8004640:	4207      	tst	r7, r0
 8004642:	d0f4      	beq.n	800462e <floor+0x96>
 8004644:	a30e      	add	r3, pc, #56	@ (adr r3, 8004680 <floor+0xe8>)
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	f7fb fdc3 	bl	80001d4 <__adddf3>
 800464e:	2200      	movs	r2, #0
 8004650:	2300      	movs	r3, #0
 8004652:	f7fc fa05 	bl	8000a60 <__aeabi_dcmpgt>
 8004656:	2800      	cmp	r0, #0
 8004658:	d0c2      	beq.n	80045e0 <floor+0x48>
 800465a:	2c00      	cmp	r4, #0
 800465c:	da0a      	bge.n	8004674 <floor+0xdc>
 800465e:	2e14      	cmp	r6, #20
 8004660:	d101      	bne.n	8004666 <floor+0xce>
 8004662:	3401      	adds	r4, #1
 8004664:	e006      	b.n	8004674 <floor+0xdc>
 8004666:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800466a:	2301      	movs	r3, #1
 800466c:	40b3      	lsls	r3, r6
 800466e:	441d      	add	r5, r3
 8004670:	4545      	cmp	r5, r8
 8004672:	d3f6      	bcc.n	8004662 <floor+0xca>
 8004674:	ea25 0507 	bic.w	r5, r5, r7
 8004678:	e7b2      	b.n	80045e0 <floor+0x48>
 800467a:	2500      	movs	r5, #0
 800467c:	462c      	mov	r4, r5
 800467e:	e7af      	b.n	80045e0 <floor+0x48>
 8004680:	8800759c 	.word	0x8800759c
 8004684:	7e37e43c 	.word	0x7e37e43c
 8004688:	bff00000 	.word	0xbff00000
 800468c:	000fffff 	.word	0x000fffff

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <__libc_init_array>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4d0d      	ldr	r5, [pc, #52]	@ (80046d8 <__libc_init_array+0x38>)
 80046a4:	4c0d      	ldr	r4, [pc, #52]	@ (80046dc <__libc_init_array+0x3c>)
 80046a6:	1b64      	subs	r4, r4, r5
 80046a8:	10a4      	asrs	r4, r4, #2
 80046aa:	2600      	movs	r6, #0
 80046ac:	42a6      	cmp	r6, r4
 80046ae:	d109      	bne.n	80046c4 <__libc_init_array+0x24>
 80046b0:	4d0b      	ldr	r5, [pc, #44]	@ (80046e0 <__libc_init_array+0x40>)
 80046b2:	4c0c      	ldr	r4, [pc, #48]	@ (80046e4 <__libc_init_array+0x44>)
 80046b4:	f000 f818 	bl	80046e8 <_init>
 80046b8:	1b64      	subs	r4, r4, r5
 80046ba:	10a4      	asrs	r4, r4, #2
 80046bc:	2600      	movs	r6, #0
 80046be:	42a6      	cmp	r6, r4
 80046c0:	d105      	bne.n	80046ce <__libc_init_array+0x2e>
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c8:	4798      	blx	r3
 80046ca:	3601      	adds	r6, #1
 80046cc:	e7ee      	b.n	80046ac <__libc_init_array+0xc>
 80046ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d2:	4798      	blx	r3
 80046d4:	3601      	adds	r6, #1
 80046d6:	e7f2      	b.n	80046be <__libc_init_array+0x1e>
 80046d8:	080048f8 	.word	0x080048f8
 80046dc:	080048f8 	.word	0x080048f8
 80046e0:	080048f8 	.word	0x080048f8
 80046e4:	080048fc 	.word	0x080048fc

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
